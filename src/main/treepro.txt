PROJECT STRUCTURE :
main
├── .DS_Store
├── java/
│   ├── .DS_Store
│   └── it/
│       ├── .DS_Store
│       └── uniroma3/
│           ├── .DS_Store
│           └── siwbooks/
│               ├── SiwbooksApplication.java
│               ├── authentication/
│               │   ├── AuthConfiguration.java
│               │   └── SecurityBeansConfig.java
│               ├── constant/
│               │   └── Nationality.java
│               ├── controller/
│               │   ├── AdminAuthorController.java
│               │   ├── AdminBookController.java
│               │   ├── AuthorController.java
│               │   ├── BookController.java
│               │   ├── HomeController.java
│               │   ├── LoginController.java
│               │   ├── RegisterController.java
│               │   ├── ReviewController.java
│               │   └── UserController.java
│               ├── model/
│               │   ├── Author.java
│               │   ├── Book.java
│               │   ├── Credentials.java
│               │   ├── ImageEntity.java
│               │   ├── Review.java
│               │   └── User.java
│               ├── repository/
│               │   ├── AuthorRepository.java
│               │   ├── BookRepository.java
│               │   ├── CredentialsRepository.java
│               │   ├── ImageEntityRepository.java
│               │   ├── ReviewRepository.java
│               │   └── UserRepository.java
│               └── service/
│                   ├── AuthorService.java
│                   ├── BookService.java
│                   ├── CredentialsService.java
│                   ├── ImageEntityService.java
│                   ├── ReviewService.java
│                   └── UserService.java
├── resources/
│   ├── application.properties
│   ├── import.sql
│   ├── static/
│   │   ├── css/
│   │   │   ├── author.css
│   │   │   ├── authors.css
│   │   │   ├── book.css
│   │   │   ├── books.css
│   │   │   └── layout.css
│   │   └── images/
│   │       ├── Amore_Ai_Tempi_1.jpg
│   │       ├── Amore_Ai_Tempi_2.jpg
│   │       ├── Cent_Anni_1.jpg
│   │       ├── Cent_Anni_2.jpg
│   │       ├── Gabriel_Garcia_Marquez.jpg
│   │       ├── Jane_Austen_coloured_version.jpg
│   │       ├── Orgoglio_E_Pregiudizio_1.jpg
│   │       ├── Orgoglio_E_Pregiudizio_2.jpg
│   │       ├── Ragione_E_Sentimento_1.jpg
│   │       ├── Ragione_E_Sentimento_2.jpg
│   │       └── placeholder.jpg
│   └── templates/
│       ├── admin/
│       │   ├── author.html
│       │   ├── authors.html
│       │   ├── book.html
│       │   ├── books.html
│       │   └── profile.html
│       ├── admin_book_form.html
│       ├── author.html
│       ├── authors.html
│       ├── book.html
│       ├── books.html
│       ├── error.html
│       ├── login.html
│       ├── register.html
│       ├── review_edit.html
│       └── user/
│           ├── author.html
│           ├── authors.html
│           ├── book.html
│           ├── books.html
│           └── profile.html
└── treepro.txt


SELECTED FILES:
- java/it/uniroma3/siwbooks/SiwbooksApplication.java
- java/it/uniroma3/siwbooks/authentication/AuthConfiguration.java
- java/it/uniroma3/siwbooks/authentication/SecurityBeansConfig.java
- java/it/uniroma3/siwbooks/constant/Nationality.java
- java/it/uniroma3/siwbooks/controller/AdminAuthorController.java
- java/it/uniroma3/siwbooks/controller/AdminBookController.java
- java/it/uniroma3/siwbooks/controller/AuthorController.java
- java/it/uniroma3/siwbooks/controller/BookController.java
- java/it/uniroma3/siwbooks/controller/HomeController.java
- java/it/uniroma3/siwbooks/controller/LoginController.java
- java/it/uniroma3/siwbooks/controller/RegisterController.java
- java/it/uniroma3/siwbooks/controller/ReviewController.java
- java/it/uniroma3/siwbooks/controller/UserController.java
- java/it/uniroma3/siwbooks/model/Author.java
- java/it/uniroma3/siwbooks/model/Book.java
- java/it/uniroma3/siwbooks/model/Credentials.java
- java/it/uniroma3/siwbooks/model/ImageEntity.java
- java/it/uniroma3/siwbooks/model/Review.java
- java/it/uniroma3/siwbooks/model/User.java
- java/it/uniroma3/siwbooks/repository/AuthorRepository.java
- java/it/uniroma3/siwbooks/repository/BookRepository.java
- java/it/uniroma3/siwbooks/repository/CredentialsRepository.java
- java/it/uniroma3/siwbooks/repository/ImageEntityRepository.java
- java/it/uniroma3/siwbooks/repository/ReviewRepository.java
- java/it/uniroma3/siwbooks/repository/UserRepository.java
- java/it/uniroma3/siwbooks/service/AuthorService.java
- java/it/uniroma3/siwbooks/service/BookService.java
- java/it/uniroma3/siwbooks/service/CredentialsService.java
- java/it/uniroma3/siwbooks/service/ImageEntityService.java
- java/it/uniroma3/siwbooks/service/ReviewService.java
- java/it/uniroma3/siwbooks/service/UserService.java
- resources/application.properties
- resources/import.sql
- resources/static/css/author.css
- resources/static/css/authors.css
- resources/static/css/book.css
- resources/static/css/books.css
- resources/static/css/layout.css
- resources/static/images/Amore_Ai_Tempi_1.jpg
- resources/static/images/Amore_Ai_Tempi_2.jpg
- resources/static/images/Cent_Anni_1.jpg
- resources/static/images/Cent_Anni_2.jpg
- resources/static/images/Gabriel_Garcia_Marquez.jpg
- resources/static/images/Jane_Austen_coloured_version.jpg
- resources/static/images/Orgoglio_E_Pregiudizio_1.jpg
- resources/static/images/Orgoglio_E_Pregiudizio_2.jpg
- resources/static/images/Ragione_E_Sentimento_1.jpg
- resources/static/images/Ragione_E_Sentimento_2.jpg
- resources/static/images/placeholder.jpg
- resources/templates/admin/author.html
- resources/templates/admin/authors.html
- resources/templates/admin/book.html
- resources/templates/admin/books.html
- resources/templates/admin/profile.html
- resources/templates/admin_book_form.html
- resources/templates/author.html
- resources/templates/authors.html
- resources/templates/book.html
- resources/templates/books.html
- resources/templates/error.html
- resources/templates/login.html
- resources/templates/register.html
- resources/templates/review_edit.html
- resources/templates/user/author.html
- resources/templates/user/authors.html
- resources/templates/user/book.html
- resources/templates/user/books.html
- resources/templates/user/profile.html
- treepro.txt

CONTENT OF SELECTED FILES:

--- java/it/uniroma3/siwbooks/SiwbooksApplication.java ---
package it.uniroma3.siwbooks;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SiwbooksApplication {

	public static void main(String[] args) {
		SpringApplication.run(SiwbooksApplication.class, args);
	}

}


--- java/it/uniroma3/siwbooks/authentication/AuthConfiguration.java ---
package it.uniroma3.siwbooks.authentication;

import static it.uniroma3.siwbooks.model.Credentials.ADMIN_ROLE;
import static it.uniroma3.siwbooks.model.Credentials.DEFAULT_ROLE;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import static org.springframework.security.config.Customizer.withDefaults;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import it.uniroma3.siwbooks.service.CredentialsService;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;

@Configuration
@EnableWebSecurity
public class AuthConfiguration {
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private CredentialsService credentialsService;

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication().dataSource(dataSource)
				.authoritiesByUsernameQuery("SELECT username, role from credentials WHERE username=?")
				.usersByUsernameQuery("SELECT username, password, 1 as enabled FROM credentials WHERE username=?");
	}


	@Bean
	protected SecurityFilterChain configure(final HttpSecurity httpSecurity) throws Exception {
        httpSecurity.csrf(withDefaults()).cors(cors -> cors.disable()).authorizeHttpRequests(requests -> requests
                // Consentiti a tutti (occasionali)
                .requestMatchers(HttpMethod.GET, "/", "/index", "/books/**", "/authors/**",
                        "/login", "/register", "/css/**", "/images/**", "favicon.ico")
                .permitAll().requestMatchers(HttpMethod.POST, "/register", "/login", "/images/**")
                .permitAll()

                // Solo ADMIN_ROLE
                .requestMatchers("/admin/**").hasAuthority(ADMIN_ROLE)

                // Solo DEFAULT_ROLE
                .requestMatchers("/user/**").hasAuthority(DEFAULT_ROLE)

                // Qualunque altra richiesta: autenticazione
                .anyRequest().authenticated()).formLogin(login -> login.loginPage("/login") // Pagina di login di default
                // per tutti
                .loginProcessingUrl("/login") // URL di submit form login user
                .usernameParameter("username").passwordParameter("pwd")
                .successHandler((request, response, authentication) -> {
                    // Success handler custom: redirect in base al ruolo
                    var principal = authentication.getPrincipal();
                    // Recupero id utente dal Principal
                    Long idUtente = null;
                    String username = null;
                    if (principal instanceof org.springframework.security.core.userdetails.UserDetails userDetails) {
                        // Ottieni ID utente qui secondo la tua implementazione
                        // Esempio: CredentialsService -> trova utente per username
                        username = userDetails.getUsername();
                        idUtente = this.credentialsService.findByUsername(username).getUser().getId();

                    }
                    boolean isAdmin = this.credentialsService.findByUsername(username).getRole().equals(ADMIN_ROLE);
                    if (isAdmin) {
                        // Se ADMIN, redirect operatore (sostituisci idUtente)
                        response.sendRedirect(idUtente != null ? "/admin/books" : "/login");
                    } else {
                        // Se Utente, redirect utente (sostituisci idUtente)
                        response.sendRedirect(idUtente != null ? "/user/books" : "/login");
                    }
                }).failureUrl("/login?error=true").permitAll()).logout(logout -> logout.logoutUrl("/logout")
                .logoutSuccessUrl("/").invalidateHttpSession(true).deleteCookies("JSESSIONID")
                .clearAuthentication(true).permitAll());
		return httpSecurity.build();
	}
}


--- java/it/uniroma3/siwbooks/authentication/SecurityBeansConfig.java ---
// src/main/java/it/uniroma3/siwbooks/auth/SecurityBeansConfig.java
package it.uniroma3.siwbooks.authentication;

import org.springframework.context.annotation.*;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityBeansConfig {
  @Bean
  public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }
}


--- java/it/uniroma3/siwbooks/constant/Nationality.java ---
package it.uniroma3.siwbooks.constant;

public enum Nationality {
    ITALY,
    UK,
    USA, 
    FRANCE, 
    GERMANY, 
    JAPAN,
    COLOMBIA
}



--- java/it/uniroma3/siwbooks/controller/AdminAuthorController.java ---
// src/main/java/it/uniroma3/siwbooks/controller/admin/AdminBookController.java
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.service.AuthorService;
import it.uniroma3.siwbooks.service.BookService;

@Controller
public class AdminAuthorController {

    @Autowired 
    private BookService bookService;

    @Autowired 
    private AuthorService authorService;

    @PostMapping("/admin/authors/{id}")
    public String deleteBook(@PathVariable("id") Long id){
        authorService.deleteById(id);
        return "redirect:/admin/authors";
    }
}


--- java/it/uniroma3/siwbooks/controller/AdminBookController.java ---
// src/main/java/it/uniroma3/siwbooks/controller/admin/AdminBookController.java
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.service.AuthorService;
import it.uniroma3.siwbooks.service.BookService;

@Controller
public class AdminBookController {

    @Autowired 
    private BookService bookService;

    @Autowired 
    private AuthorService authorService;

    @PostMapping("/admin/books/{id}")
    public String deleteBook(@PathVariable("id") Long id){
        bookService.deleteById(id);
        return "redirect:/admin/books";
    }
}


--- java/it/uniroma3/siwbooks/controller/AuthorController.java ---
package it.uniroma3.siwbooks.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import it.uniroma3.siwbooks.model.Author;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.AuthorService;
import it.uniroma3.siwbooks.service.UserService;

@Controller
public class AuthorController {

    @Autowired
    public AuthorService authorService;

    @Autowired
    public UserService userService;

    @GetMapping("/authors")
    public String listAuthors(Model model){
        model.addAttribute("authors", this.authorService.findAll());
        return "authors";
    }

    @GetMapping("/authors/{id}")
    public String viewAuthor(@PathVariable Long id ,Model model){
        Author author = authorService.findById(id);

        if(author==null){
            return "error";
        }
        model.addAttribute("author", author);
        return "author";
    }

    @GetMapping("/user/authors")
    public String listUserAuthors(Model model){
        User user = userService.getCurrentUser();
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("authors", this.authorService.findAll());
        return "user/authors";
    }

    @GetMapping("/user/authors/{id}")
    public String viewUserAuthor(@PathVariable Long id ,Model model){
        Author author = authorService.findById(id);
        User user = userService.getCurrentUser();

        if(author==null){
            return "error";
        }
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("author", author);
        return "user/author";
    }

    @GetMapping("/admin/authors")
    public String listAdminAuthors(Model model){
        User user = userService.getCurrentUser();
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("authors", this.authorService.findAll());
        return "admin/authors";
    }

    @GetMapping("/admin/authors/{id}")
    public String viewAdminAuthor(@PathVariable Long id ,Model model){
        Author author = authorService.findById(id);
        User user = userService.getCurrentUser();

        if(author==null){
            return "error";
        }
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("author", author);
        return "admin/author";
    }
}

--- java/it/uniroma3/siwbooks/controller/BookController.java ---
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.BookService;
import it.uniroma3.siwbooks.service.ReviewService;
import it.uniroma3.siwbooks.service.UserService;

@Controller
public class BookController {

    @Autowired
    private BookService bookService;
    @Autowired
    private UserService userService;
    @Autowired
    private ReviewService reviewService;


    @GetMapping("/books")
    public String listBooks(Model model) {
        model.addAttribute("books", bookService.findAll());
        return "books";
    }

    @GetMapping("/books/{id}")
    public String viewBook(@PathVariable("id") Long id, Model model) {
        Book book = bookService.findById(id);
        if(book == null){
            return "error";
        }
        model.addAttribute("book", book);

        return "book";
    }

    @GetMapping("/user/books")
    public String listUserBooks(Model model) {
        User user = userService.getCurrentUser();
        if (user == null){
            return "redirect:/login";
        }

        model.addAttribute("books", bookService.findAll());
        model.addAttribute("user", user);
        return "user/books";
    }

    @GetMapping("/user/books/{id}")
    public String viewUserBook(@PathVariable("id") Long id, Model model) {
        Book book = bookService.findById(id);
        User user = userService.getCurrentUser();

        if(book == null){
            return "error.html";
        }
        if (user == null){
            return "redirect:/login";
        }
        boolean hasReview = reviewService.existsByUserAndBook(user, book);
        model.addAttribute("hasReview", hasReview);
        model.addAttribute("book", book);
        model.addAttribute("user", user);
        return "user/book";
    }
    @GetMapping("/admin/books")
    public String listAdminBooks(Model model) {
        User user = userService.getCurrentUser();
        if (user == null){
            return "redirect:/login";
        }

        model.addAttribute("books", bookService.findAll());
        model.addAttribute("user", user);
        return "admin/books";
    }

    @GetMapping("/admin/books/{id}")
    public String viewAdminBook(@PathVariable("id") Long id, Model model) {
        Book book = bookService.findById(id);
        User user = userService.getCurrentUser();

        if(book == null){
            return "error.html";
        }
        if (user == null){
            return "redirect:/login";
        }
        boolean hasReview = reviewService.existsByUserAndBook(user, book);
        model.addAttribute("hasReview", hasReview);
        model.addAttribute("book", book);
        model.addAttribute("user", user);
        return "admin/book";
    }
}



--- java/it/uniroma3/siwbooks/controller/HomeController.java ---
// src/main/java/it/uniroma3/siwbooks/controller/HomeController.java
package it.uniroma3.siwbooks.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String home() {
        // forward root → your list of books
        return "redirect:/books";
    }
}



--- java/it/uniroma3/siwbooks/controller/LoginController.java ---
package it.uniroma3.siwbooks.controller;

import java.util.Optional;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String login(@RequestParam Optional<String> error, Model model) {
        model.addAttribute("loginError", error.isPresent());
        return "login";
    }
}



--- java/it/uniroma3/siwbooks/controller/RegisterController.java ---
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import it.uniroma3.siwbooks.model.Credentials;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.CredentialsService;

@Controller
public class RegisterController {

    @Autowired
    private CredentialsService credentialsService;

    /**
     * Mostra la pagina di registrazione.
     */
    @GetMapping("/register")
	public String showRegister(Model model) {
		model.addAttribute("user", new User());
		model.addAttribute("credentials", new Credentials());
		return "register";
	}


    /**
     * Processa il form di registrazione.
    */
    @PostMapping("/register")
    public String registerUser(
        @Valid @ModelAttribute("credentials") Credentials credentials,
        BindingResult binding
    ) {
        if (credentialsService.existsByUsername(credentials.getUsername())) {
            binding.rejectValue("username","error.credentials","Username già esistente");
        }
        if (binding.hasErrors()) return "register";

        // role e user già collegati
        credentials.setRole(Credentials.DEFAULT_ROLE);
        credentialsService.save(credentials);
        return "redirect:/login?registered";
    }

}



--- java/it/uniroma3/siwbooks/controller/ReviewController.java ---
package it.uniroma3.siwbooks.controller;


import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;


import it.uniroma3.siwbooks.model.Book;

import it.uniroma3.siwbooks.model.Review;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.*;

@Controller
public class ReviewController {

    @Autowired 
    private ReviewService reviewService;

    @Autowired 
    private CredentialsService credentialsService;

    @Autowired 
    private UserService userService;

    @Autowired 
    private BookService bookService;

    private boolean verifyId(Long id1, Long id2){
        return Objects.equals(id1, id2);
    }


    @PostMapping("/user/{userId}/books/{bookId}/review")
    public String addReview(@PathVariable("userId") Long userId,
                            @PathVariable("bookId")  Long bookId,
                            @RequestParam("title") String title,
                            @RequestParam("text") String text,
                            @RequestParam("mark") int mark,
                            Model model) {
        Book book = this.bookService.findById(bookId);
        User user = this.userService.getCurrentUser();

        if (book == null || user == null || !verifyId(userId, user.getId())){
            return "redirect:/login";
        }

        boolean hasReview = reviewService.existsByUserAndBook(user, book);

        model.addAttribute("hasReview", hasReview);

        this.reviewService.save(new Review(title, mark, text, user, book));
        return "redirect:/user/books/" + bookId;
    }

    @PostMapping("/admin/{userId}/books/{bookId}/review")
    public String addAdminReview(@PathVariable("userId") Long userId,
                            @PathVariable("bookId")  Long bookId,
                            @RequestParam("title") String title,
                            @RequestParam("text") String text,
                            @RequestParam("mark") int mark,
                            Model model) {
        Book book = this.bookService.findById(bookId);
        User user = this.userService.getCurrentUser();

        if (book == null || user == null || !verifyId(userId, user.getId())){
            return "redirect:/login";
        }

        boolean hasReview = reviewService.existsByUserAndBook(user, book);

        model.addAttribute("hasReview", hasReview);

        this.reviewService.save(new Review(title, mark, text, user, book));
        return "redirect:/admin/books/" + bookId;
    }

    @PostMapping("/admin/review/{id}/delete")
    public String deleteReview(@PathVariable("id") Long id){
        User user = this.userService.getCurrentUser();
        Review review = reviewService.findById(id);
        Book book = review.getBook();

        if (book == null || user == null){
            return "redirect:/login";
        }

        reviewService.deleteById(id);
        return "redirect:/admin/books/" + book.getId();
    }
}


--- java/it/uniroma3/siwbooks/controller/UserController.java ---
package it.uniroma3.siwbooks.controller;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import it.uniroma3.siwbooks.service.CredentialsService;
import it.uniroma3.siwbooks.service.UserService;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import it.uniroma3.siwbooks.model.User;


@Controller
public class UserController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private CredentialsService credentialsService;

    private boolean verifyId(Long idUrl, Long idUser) {
		return idUser!= null && Objects.equals(idUrl, idUser);
	}

    @GetMapping("/user/{id}")
    public String showProfile(@PathVariable("id") Long id,
            @RequestParam(value="showPasswordModal", required = false, defaultValue = "false") boolean showPasswordModal,
            Model model) {
        User user = userService.getCurrentUser();
        if (!verifyId(id, user.getId())){
            return "redirect:/login";
        }
        model.addAttribute("showPasswordModal", showPasswordModal);
        model.addAttribute("user", user);
        return "user/profile";
    }

    @GetMapping("/admin/{id}")
    public String showAdminProfile(@PathVariable("id") Long id,
            @RequestParam(value="showPasswordModal", required = false, defaultValue = "false") boolean showPasswordModal,
            Model model) {
        User user = userService.getCurrentUser();
        if (!verifyId(id, user.getId())){
            return "redirect:/login";
        }
        model.addAttribute("showPasswordModal", showPasswordModal);
        model.addAttribute("user", user);
        return "admin/profile";
    }
}

--- java/it/uniroma3/siwbooks/model/Author.java ---

package it.uniroma3.siwbooks.model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.springframework.format.annotation.DateTimeFormat;

import it.uniroma3.siwbooks.constant.Nationality;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToOne;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.PastOrPresent;



@Entity
public class Author {
    @Id
    @GeneratedValue
    private Long id;

    @NotEmpty
    private String name;

    @NotEmpty
    private String surname;

    @NotNull
    @Past
    @DateTimeFormat(pattern = "dd-MM-yyyy")
    private LocalDate birthDate;

    @PastOrPresent
    @DateTimeFormat(pattern = "dd-MM-yyyy")
    private LocalDate deathDate;

    @NotNull
	@Enumerated(EnumType.STRING)
    private Nationality nationality;


    @ManyToMany(mappedBy = "authors", cascade = CascadeType.ALL)
    private List<Book> books = new ArrayList<>();

    @OneToOne(cascade = CascadeType.ALL)
	private ImageEntity photo;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public LocalDate getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
    }

    public LocalDate getDeathDate() {
        return deathDate;
    }

    public void setDeathDate(LocalDate deathDate) {
        this.deathDate = deathDate;
    }

    public Nationality getNationality() {
        return nationality;
    }

    public void setNationality(Nationality nationality) {
        this.nationality = nationality;
    }

    public List<Book> getBooks() {
        return books;
    }

    public void setBooks(List<Book> books) {
        this.books = books;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Author author = (Author) o;

        return id != null ? id.equals(author.id) : author.id == null;
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }

    public ImageEntity getPhoto() {
        return photo;
    }

    public void setPhoto(ImageEntity photo) {
        this.photo = photo;
    }

    public String getFullName() {
        return this.name + " " + this.surname;
    }
}


--- java/it/uniroma3/siwbooks/model/Book.java ---
package it.uniroma3.siwbooks.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;

@Entity
public class Book {

    @Id 
    @GeneratedValue
    private Long id;

    private String title;
    private Integer publicationYear;

    /* --- relazioni ---------------------------------------------------- */

    @ManyToMany
    private Set<Author> authors = new HashSet<>();

    @OneToMany(cascade = CascadeType.ALL)
    private List<ImageEntity> images = new ArrayList<>();

    @OneToMany(
      mappedBy = "book",
      cascade = CascadeType.ALL,
      orphanRemoval = true
    )
    private List<Review> reviews = new ArrayList<>();
    
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getPublicationYear() {
        return publicationYear;
    }

    public void setPublicationYear(Integer publicationYear) {
        this.publicationYear = publicationYear;
    }

    public Set<Author> getAuthors() {
        return authors;
    }

    public void setAuthors(Set<Author> authors) {
        this.authors = authors;
    }

    public List<ImageEntity> getImages() {
        return images;
    }

    public void setImages(List<ImageEntity> images) {
        this.images = images;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Book)) return false;
        Book book = (Book) o;
        return id != null && id.equals(book.id);
    }

    @Override
    public int hashCode() {
        return 31 + (id == null ? 0 : id.hashCode());
    }

    public List<Review> getReviews() {
        return reviews;
    }

    public void setReviews(List<Review> reviews) {
        this.reviews = reviews;
    }
}

--- java/it/uniroma3/siwbooks/model/Credentials.java ---
package it.uniroma3.siwbooks.model;

import java.util.Objects;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.validation.constraints.NotEmpty;

@Entity
public class Credentials {

    public static final String DEFAULT_ROLE = "DEFAULT";
    public static final String ADMIN_ROLE   = "ADMIN";

    @Id @GeneratedValue 
    private Long id;

    @NotEmpty 
    private String username;
    
    @NotEmpty 
    private String password;

    @NotEmpty 
    private String role = DEFAULT_ROLE;

    @OneToOne(cascade = CascadeType.ALL)
    private User user;
	
	public String getUsername() {
		return username;
	}
	
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	
	public void setUsername(String username) {
		this.username = username;
	}
	
	public String getPassword() {
		return password;
	}
	
	public void setPassword(String password) {
		this.password = password;
	}
	
	public String getRole() {
		return role;
	}
	
	public void setRole(String role) {
		this.role = role;
	}

	@Override
	public int hashCode() {
		return Objects.hash(username);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Credentials other = (Credentials) obj;
		return Objects.equals(username, other.username);
	}

	
}


--- java/it/uniroma3/siwbooks/model/ImageEntity.java ---
package it.uniroma3.siwbooks.model;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;


@Entity
public class ImageEntity {

    public static final String PATH = "/images/";   // prefisso URL

    @Id @GeneratedValue
    private Long id;

    @NotNull
    private String name;            // es. "/images/holmes.jpg"

    
    @Autowired
    protected ImageEntity() { }                 // JPA


    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }


    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ImageEntity other = (ImageEntity) obj;
		return Objects.equals(name, other.name);
	}

}



--- java/it/uniroma3/siwbooks/model/Review.java ---
package it.uniroma3.siwbooks.model;
import java.util.Objects;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

@Entity
public class Review {

    public Review(@NotEmpty @NotNull String title, @Min(1) @Max(5) int mark, @NotEmpty @NotNull String text, User user,
            Book book) {
        this.title = title;
        this.mark = mark;
        this.text = text;
        this.user = user;
        this.book = book;
    }

    public Review() {
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @NotEmpty
    @NotNull
    private String title;

    @Min(1) @Max(5)
    private int mark; 

    @NotEmpty
    @NotNull
    @Column(length=2000)
    private String text;

    @ManyToOne()
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    private Book book;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public int getMark() {
        return mark;
    }

    public void setMark(int mark) {
        this.mark = mark;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 41 * hash + Objects.hashCode(this.id);
        hash = 41 * hash + Objects.hashCode(this.title);
        hash = 41 * hash + this.mark;
        hash = 41 * hash + Objects.hashCode(this.text);
        hash = 41 * hash + Objects.hashCode(this.user);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Review other = (Review) obj;
        if (this.mark != other.mark) {
            return false;
        }
        if (!Objects.equals(this.title, other.title)) {
            return false;
        }
        if (!Objects.equals(this.text, other.text)) {
            return false;
        }
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        return Objects.equals(this.user, other.user);
    }

    public Book getBook() {
        return book;
    }

    public void setBook(Book book) {
        this.book = book;
    }

}

--- java/it/uniroma3/siwbooks/model/User.java ---
package it.uniroma3.siwbooks.model;

import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

@Entity
@Table(name = "users")
@SequenceGenerator(
  name = "users_seq_gen",      // un nome a tua scelta
  sequenceName = "users_seq",  // la sequenza che hai creato in import.sql
  allocationSize = 50          // deve corrispondere all'INCREMENT BY di users_seq
)
public class User {

    @Id
    @GeneratedValue(
      strategy = GenerationType.SEQUENCE,
      generator = "users_seq_gen"
    )
    private Long id;

    @NotNull @NotEmpty
    private String nome;

    @NotNull @NotEmpty
    private String cognome;

    @NotNull @NotEmpty
    private String email;

    @OneToMany(mappedBy="user", cascade=CascadeType.ALL)
    private List<Review> recensioni;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getCognome() {
        return cognome;
    }

    public void setCognome(String cognome) {
        this.cognome = cognome;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public List<Review> getRecensioni() {
        return recensioni;
    }

    public void setRecensioni(List<Review> recensioni) {
        this.recensioni = recensioni;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return id != null && id.equals(user.id);
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}


--- java/it/uniroma3/siwbooks/repository/AuthorRepository.java ---
package it.uniroma3.siwbooks.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import it.uniroma3.siwbooks.model.Author;

public interface AuthorRepository extends JpaRepository<Author, Long>{

}


--- java/it/uniroma3/siwbooks/repository/BookRepository.java ---
package it.uniroma3.siwbooks.repository;

import it.uniroma3.siwbooks.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}


--- java/it/uniroma3/siwbooks/repository/CredentialsRepository.java ---
package it.uniroma3.siwbooks.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.siwbooks.model.Credentials;
import it.uniroma3.siwbooks.model.User;

// CredentialsRepository.java
public interface CredentialsRepository extends JpaRepository<Credentials, Long> {

    Optional<Credentials> findByUsername(String username);
    boolean existsByUsername(String username);
}




--- java/it/uniroma3/siwbooks/repository/ImageEntityRepository.java ---

package it.uniroma3.siwbooks.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.siwbooks.model.ImageEntity;

public interface ImageEntityRepository extends JpaRepository<ImageEntity, Long> { }


--- java/it/uniroma3/siwbooks/repository/ReviewRepository.java ---
package it.uniroma3.siwbooks.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import it.uniroma3.siwbooks.model.*;
import java.util.Optional;

public interface ReviewRepository extends JpaRepository<Review, Long> {
  boolean existsByUserAndBook(User user, Book book);
  Optional<Review> findByUserAndBook(User user, Book book);
}


--- java/it/uniroma3/siwbooks/repository/UserRepository.java ---
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

package it.uniroma3.siwbooks.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import it.uniroma3.siwbooks.model.User;

public interface UserRepository extends JpaRepository<User, Long> {

}


--- java/it/uniroma3/siwbooks/service/AuthorService.java ---
package it.uniroma3.siwbooks.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siwbooks.model.Author;
import it.uniroma3.siwbooks.repository.AuthorRepository;

@Service
public class AuthorService {
    @Autowired
    public AuthorRepository authorRepository;
    
    public List<Author> findAll() {
        return authorRepository.findAll();
    }

    public Author findById(Long id) {
        return authorRepository.findById(id).orElse(null);
    }

    public void save(Author author){
        authorRepository.save(author);
    }

    public void deleteById(Long id){
        authorRepository.deleteById(id);
    }
}

--- java/it/uniroma3/siwbooks/service/BookService.java ---
// src/main/java/it/uniroma3/siwbooks/service/BookService.java
package it.uniroma3.siwbooks.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.repository.BookRepository;

@Service
public class BookService {

    @Autowired private BookRepository repo;

    public List<Book> findAll(){
         return repo.findAll(); 
        }

    public Book findById(Long id){
        return repo.findById(id).orElse(null); 
    }

    /** inserisce o aggiorna */
    public Book save(Book b){ 
        return repo.save(b); 
    }

    public void deleteById(Long id){
        repo.deleteById(id);
    }
}


--- java/it/uniroma3/siwbooks/service/CredentialsService.java ---
// src/main/java/it/uniroma3/siwbooks/service/CredentialsService.java
package it.uniroma3.siwbooks.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import static it.uniroma3.siwbooks.model.Credentials.ADMIN_ROLE;
import static it.uniroma3.siwbooks.model.Credentials.DEFAULT_ROLE;

import it.uniroma3.siwbooks.model.Credentials;
import it.uniroma3.siwbooks.repository.CredentialsRepository;
import jakarta.validation.Valid;

import it.uniroma3.siwbooks.model.User;

@Service
public class CredentialsService {

    @Autowired
    private CredentialsRepository credentialsRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /** Per recuperare l’utente in BookController */
    public Credentials findByUsername(String username) {
        return credentialsRepository.findByUsername(username).orElse(null);
    }

    public void save(@Valid Credentials credentials) {
        credentials.setRole(DEFAULT_ROLE);
        credentials.setPassword(this.passwordEncoder.encode(credentials.getPassword()));
        credentialsRepository.save(credentials);
    }

    public boolean existsByUsername(String u) {
        return credentialsRepository.existsByUsername(u);
    }

    public User getCurrentUser(){
        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        return this.findByUsername(userDetails.getUsername()).getUser();
    }
}


--- java/it/uniroma3/siwbooks/service/ImageEntityService.java ---
package it.uniroma3.siwbooks.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import it.uniroma3.siwbooks.model.ImageEntity;
import it.uniroma3.siwbooks.repository.ImageEntityRepository;
import jakarta.transaction.Transactional;

import static it.uniroma3.siwbooks.model.ImageEntity.PATH;

@Service
public class ImageEntityService {
    
	@Autowired
    private ImageEntityRepository imageEntityRepository;
	
    @Value("${upload.dir}")
    private String uploadDir;

    public ImageEntity getImage(Long id) {
        return imageEntityRepository.findById(id).orElse(null);
    }
}


--- java/it/uniroma3/siwbooks/service/ReviewService.java ---
package it.uniroma3.siwbooks.service;

import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import it.uniroma3.siwbooks.model.*;
import it.uniroma3.siwbooks.repository.*;

@Service
public class ReviewService {

    @Autowired private ReviewRepository reviewRepo;
    @Autowired private BookRepository   bookRepo;
    @Autowired private UserRepository   userRepo;


    public void save(Review review) {
        if (reviewRepo.existsByUserAndBook(review.getUser(), review.getBook())) {
        throw new IllegalStateException("Hai già recensito questo libro");
    }
       reviewRepo.save(review);
    }

    public boolean existsByUserAndBook(User user, Book book){
        return reviewRepo.existsByUserAndBook(user, book);
    }

    public Review findById(Long id){
        return reviewRepo.findById(id).orElse(null);
    }

    public void deleteById(Long id){
        reviewRepo.deleteById(id);
    }
}


--- java/it/uniroma3/siwbooks/service/UserService.java ---
package it.uniroma3.siwbooks.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.repository.UserRepository;
import jakarta.validation.Valid;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
	private CredentialsService credentialsService;

    public User getCurrentUser(){
        return credentialsService.getCurrentUser();
    }

    public User findById(Long id){
        return userRepository.findById(id).orElse(null);
    }

    public void save(@Valid User user){
        userRepository.save(user);
    }
}

--- resources/application.properties ---
#==================================
# = Application
#==================================
spring.application.name=siwbooks

#==================================
# = Datasource
#==================================
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace

# ricrea lo schema a ogni avvio in dev
spring.jpa.hibernate.ddl-auto=create

# esegue import.sql sempre
spring.sql.init.mode=ALWAYS

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/siwbooks
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#==================================
# = Web server
#==================================
server.port=8080
server.error.whitelabel.enabled=false
server.error.include-stacktrace=always

#==================================
# = Thymeleaf
#==================================
spring.thymeleaf.enabled=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=UTF-8

spring.web.resources.static-locations=classpath:/static/

#==================================
# = Messages
#==================================
spring.messages.basename=messages/messages
spring.messages.encoding=UTF-8

#==================================
# = Formattazione date/ora
#==================================
spring.mvc.format.date=dd/MM/yyyy
spring.mvc.format.date-time=dd/MM/yyyy HH:mm

#==================================
# = Upload di file (immagini)
#==================================
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB
upload.dir=./src/main/resources/static/images

#==================================
# = Sicurezza
#==================================
# eventuali proprietà di CORS o personalizzazioni Security vanno aggiunte qui
spring.devtools.restart.polling=true
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=400


--- resources/import.sql ---
-- IMMAGINI
INSERT INTO image_entity (id, name) VALUES (1, '/images/Orgoglio_E_Pregiudizio_1.jpg');
INSERT INTO image_entity (id, name) VALUES (2, '/images/Orgoglio_E_Pregiudizio_2.jpg');
INSERT INTO image_entity (id, name) VALUES (3, '/images/Cent_Anni_1.jpg');
INSERT INTO image_entity (id, name) VALUES (4, '/images/Cent_Anni_2.jpg');
INSERT INTO image_entity (id, name) VALUES (5, '/images/Ragione_E_Sentimento_1.jpg');
INSERT INTO image_entity (id, name) VALUES (6, '/images/Ragione_E_Sentimento_2.jpg');
INSERT INTO image_entity (id, name) VALUES (7, '/images/Amore_Ai_Tempi_1.jpg');
INSERT INTO image_entity (id, name) VALUES (8, '/images/Amore_Ai_Tempi_2.jpg');
INSERT INTO image_entity (id, name) VALUES (9, '/images/Jane_Austen_coloured_version.jpg');
INSERT INTO image_entity (id, name) VALUES (10, '/images/Gabriel_Garcia_Marquez.jpg');

-- AUTORI
INSERT INTO author (id, name, surname, birth_date, death_date, nationality, photo_id) VALUES (1, 'Jane', 'Austen', '1775-12-16', '1817-07-18', 'UK', 9);
INSERT INTO author (id, name, surname, birth_date, death_date, nationality, photo_id) VALUES (2, 'Gabriel', 'García Márquez', '1927-03-06', '2014-04-17', 'COLOMBIA', 10);

-- LIBRI
INSERT INTO book (id, title, publication_year) VALUES (1, 'Orgoglio e Pregiudizio', 1813);
INSERT INTO book (id, title, publication_year) VALUES (2, 'Ragione e Sentimento', 1811);
INSERT INTO book (id, title, publication_year) VALUES (3, 'Cent anni di solitudine', 1967);
INSERT INTO book (id, title, publication_year) VALUES (4, 'L amore ai tempi del colera', 1985);


-- RELAZIONE LIBRI-AUTORI
INSERT INTO book_authors (authors_id, books_id) VALUES (1, 1);
INSERT INTO book_authors (authors_id, books_id) VALUES (1, 2);
INSERT INTO book_authors (authors_id, books_id) VALUES (2, 3);
INSERT INTO book_authors (authors_id, books_id) VALUES (2, 4);

-- RELAZIONE LIBRO-IMMAGINI
INSERT INTO book_images (book_id, images_id) VALUES (1, 1);
INSERT INTO book_images (book_id, images_id) VALUES (1, 2);
INSERT INTO book_images (book_id, images_id) VALUES (2, 3);
INSERT INTO book_images (book_id, images_id) VALUES (2, 4);
INSERT INTO book_images (book_id, images_id) VALUES (3, 5);
INSERT INTO book_images (book_id, images_id) VALUES (3, 6);
INSERT INTO book_images (book_id, images_id) VALUES (4, 7);
INSERT INTO book_images (book_id, images_id) VALUES (4, 8);


-- UTENTI
INSERT INTO users (id, nome, cognome, email) VALUES (1, 'Alice', 'Bianchi', 'alice@example.com');
INSERT INTO users (id, nome, cognome, email) VALUES (2, 'Mario', 'Rossi', 'mario.rossi@uniroma3.it');

-- RECENSIONI
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (1, 'Un capolavoro',               'La profondità dei personaggi e il dialogo brillante lo rendono indimenticabile.', 5, 1, 1);
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (2, 'Emozionante',                 'Una storia di sentimenti e doveri che cattura il cuore ad ogni pagina.',            4, 2, 2);
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (3, 'Avvolgente come un mito',     'La saga della famiglia Buendía è epica, magica e struggente allo stesso tempo.',      5, 3, 1);
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (4, 'Storia d’amore intensa',      'La passione e la nostalgia di Florentino e Fermina restano impresse nella mente.',   4, 4, 2);


-- password = admin (BCrypt: cambia se vuoi)
INSERT INTO credentials (id, username, password, role, user_id) VALUES (10, 'admin', '$2a$12$IHPBPKzSiG5TExakOPaLKuGDlpHoElnteQe4kRoc2n3RUAADPb6q2', 'ADMIN', 1);
-- password = admin (BCrypt: cambia se vuoi)
INSERT INTO credentials (id, username, password, role, user_id) VALUES (11, 'user', '$2a$12$UInFQ4nlMZYVIheDPzNrDOwxhRCa.hhKcH9uNmHdIYga0qOLC1MwW', 'DEFAULT', 2);

 
-- (Eventuali CREDENTIALS da preinserire, se ti servono)
-- INSERT INTO credentials (id, username, password, role, user_id) VALUES (1, 'alice', '$2a$10$…', 'DEFAULT', 1);

-- RIPRISTINO DELLE SEQUENZE PER EVITARE DUPLICATI
SELECT setval('author_seq',         (SELECT MAX(id) FROM author));
SELECT setval('book_seq',           (SELECT MAX(id) FROM book));
SELECT setval('image_entity_seq',   (SELECT MAX(id) FROM image_entity));
SELECT setval('users_seq',          (SELECT MAX(id) FROM users));
SELECT setval('review_seq',         (SELECT MAX(id) FROM review));
SELECT setval('credentials_seq', (SELECT MAX(id) FROM credentials));


--- resources/static/css/author.css ---
/* author.css */

/* Contenitore principale */
.main-content {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Scheda autore */
.author-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.author-card img {
  width: 160px;
  height: 160px;
  object-fit: cover;
  border-radius: 50%;
  margin-bottom: 1rem;
}

.author-card div {
  font-family: 'Open Sans', sans-serif;
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

/* Messaggio vuoto */
.empty-message {
  text-align: center;
  margin: 2rem 0;
  font-family: 'Open Sans', sans-serif;
  color: #666;
}

/* Griglia dei libri */
.books-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 1rem;
  margin-top: 2rem;
}

/* Scheda libro */
.book-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s, box-shadow 0.2s;
}

.book-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

/* Wrapper copertina libro */
.book-cover-wrapper {
  width: 100%;
  height: 180px;
  background: #f0f0f0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.book-cover-wrapper img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Info libro */
.book-info {
  padding: 1rem;
  text-align: center;
}

.book-title {
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  margin: 0;
}


--- resources/static/css/authors.css ---
/* authors.css */

/* 1) grid container */
.authors-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 1.5rem;
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Empty-state */
.no-content {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
  font-family: 'Open Sans', sans-serif;
  text-align: center;
  color: #777;
}

/* 2) each card */
.author-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s, box-shadow 0.2s;
}
.author-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

.author-card img {
  width: 100%;
  aspect-ratio: 1 / 1;
  object-fit: cover;
  display: block;
}

/* 4) text & button area */
.author-info {
  padding: 1rem;
  text-align: center;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.author-info h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

/* 5) view-details link */
.view-details-link {
  display: inline-block;
  margin-top: 0.5rem;
  padding: 0.5rem 1rem;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
  color: #fff;
  background-color: #333;
  border-radius: 4px;
  text-decoration: none;
  transition: background-color 0.2s;
}
.view-details-link:hover {
  background-color: #555;
}


/* DELETE */

.card-actions {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

.delete-form {
  display: inline;
}

.delete-button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  background-color: #ff5252;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.delete-button:hover {
  background-color: #e04848;
}


--- resources/static/css/book.css ---
/* book.css */

/* Contenitore principale */
.details-container {
  max-width: 1000px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Layout due colonne per immagine + info */
.book-details {
  display: flex;
  gap: 2rem;
}
@media (max-width: 768px) {
  .book-details {
    flex-direction: column;
  }
}

/* Sezione immagini */
.images-container {
  flex: 1;
}
.images-grid {
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  padding-bottom: 0.5rem;
}
.image-item {
  flex: 0 0 auto;
}
.book-img {
  display: block;
  max-height: 200px;
  width: auto;
  border-radius: 4px;
}

/* Placeholder quando non ci sono immagini */
.no-images-placeholder {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  text-align: center;
}

/* Sezione informazioni libro */
.book-info {
  flex: 2;
  display: flex;
  flex-direction: column;
}
.book-title {
  font-family: 'Merriweather', serif;
  font-size: 2rem;
  margin-bottom: 1rem;
}

/* Sottosezioni (Autori, Anno, Recensioni…) */
.info-section {
  margin-bottom: 1.5rem;
}
.info-section h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

/* Lista autori */
.authors-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}
.author-link {
  font-family: 'Open Sans', sans-serif;
  color: #333;
  text-decoration: none;
  padding: 0.25rem 0.5rem;
  border: 1px solid #333;
  border-radius: 4px;
  transition: background-color 0.2s, color 0.2s;
}
.author-link:hover {
  background-color: #333;
  color: #fff;
}

/* Recensioni */
.reviews-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.review-item {
  border-top: 1px solid #e0e0e0;
  padding-top: 1rem;
}
.review-title {
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  margin: 0 0 0.5rem;
}
.review-text {
  font-family: 'Open Sans', sans-serif;
  margin: 0.25rem 0;
}
.review-rating {
  font-weight: bold;
  margin-top: 0.5rem;
}
.review-empty {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  font-style: italic;
}

.login-to-review {
  background: #fff8e1;
  border: 1px solid #ffe082;
  padding: 0.75rem 1rem;
  margin-bottom: 1rem;
  border-radius: 4px;
  font-family: 'Open Sans', sans-serif;
}

.login-to-review a {
  color: #ff8f00;
  text-decoration: none;
  font-weight: bold;
}

.login-to-review a:hover {
  text-decoration: underline;
}
/* FORM */

/* Review form */
.review-form {
  margin-top: 2rem;
  margin-bottom: 3rem;
  padding: 1.5rem;
  background-color: #fafafa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  font-family: 'Open Sans', sans-serif;
}

.review-form input[type="text"],
.review-form textarea,
.review-form select {
  width: 100%;
  padding: 0.75rem;
  font-size: 1rem;
  line-height: 1.4;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  transition: border-color 0.2s;
}

.review-form input[type="text"]::placeholder,
.review-form textarea::placeholder {
  color: #999;
}

.review-form input[type="text"]:focus,
.review-form textarea:focus,
.review-form select:focus {
  border-color: #333;
}

.review-form button {
  align-self: flex-start;
  padding: 0.75rem 1.5rem;
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.review-form button:hover {
  background-color: #555;
}

/* Messaggio “Hai già commentato!” */
.already-reviewed {
  background-color: #fff8e1;
  border: 1px solid #ffe082;
  padding: 1rem;
  margin-bottom: 2rem;
  border-radius: 4px;
  font-family: 'Open Sans', sans-serif;
  color: #333;
}

/* DELETE */

.card-actions {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

.delete-form {
  display: inline;
}

.delete-button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  background-color: #ff5252;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.delete-button:hover {
  background-color: #e04848;
}


--- resources/static/css/books.css ---
/* books.css */

/* Grid container */
.books-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 1.5rem;
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Card base */
.book-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s, box-shadow 0.2s;
}
.book-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

/* Cover wrapper: fixed height, center & contain */
.book-cover-wrapper {
  width: 100%;
  height: 260px;
  background: #f0f0f0;
  display: flex;
  justify-content: center;
  align-items: center;
}
.book-cover-wrapper img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Info area */
.book-info {
  padding: 1rem;
  text-align: center;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.book-title {
  font-family: 'Merriweather', serif;
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
}

/* Details link/button */
.view-details-link {
  display: inline-block;
  margin-top: 0.5rem;
  padding: 0.5rem 1rem;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
  color: #fff;
  background-color: #333;
  border-radius: 4px;
  text-decoration: none;
  transition: background-color 0.2s;
}
.view-details-link:hover {
  background-color: #555;
}

/* Empty message */
.empty-message {
  text-align: center;
  margin: 2rem;
  font-family: 'Open Sans', sans-serif;
  color: #666;
}

/* Responsive tweak */
@media (max-width: 600px) {
  .book-cover-wrapper {
    height: 180px;
  }
}

/* DELETE */

.card-actions {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

.delete-form {
  display: inline;
}

.delete-button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  background-color: #ff5252;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.delete-button:hover {
  background-color: #e04848;
}



--- resources/static/css/layout.css ---
/* layout.css */

/* Reset some defaults */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* HEADER */
.header {
  background-color: #333;
  color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0.5rem 1rem;
}

.navbar-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.navbar-links-group {
  display: flex;
  align-items: center;
}

.navbar-Title {
  font-family: 'Merriweather', serif;
  font-size: 1.5rem;
  margin-right: 2rem;
}


.navbar-link {
  display: inline-block;
  padding: 0.5rem 1rem;
  color: #ddd;
  text-decoration: none;
  transition: color 0.2s ease;
}

button.navbar-link {
  /* remove default button styles */
  background: none;
  border: none;
  /* preserve your link padding & sizing */
  display: inline-block;
  padding: 0.5rem 1rem;
  /* grab the same font/color/hover you already have */
  font-family: inherit;
  color: inherit;
  text-decoration: none;
  transition: color 0.2s ease;
  cursor: pointer;
}

/* hover state */
.navbar-link:hover {
  color: #fff;
}

/* active page state */
.navbar-link.active {
  color: #fff;
  border-bottom: 2px solid #fff;
}
/* FOOTER */
.footer {
  background-color: #f5f5f5;
  color: #555;
  border-top: 1px solid #e0e0e0;
}

.footer-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
  text-align: center;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
}


/* make our inline logout form sit in the link-group */
.navbar-links-group form {
  display: inline; 
  margin: 0;     /* reset any browser form margins */
}

/* style <button class="navbar-link"> exactly like your links */
button.navbar-link {
  /* inherit all the .navbar-link settings */
  display: inline-block;
  padding: 0.5rem 1rem;
  color: #ddd;
  text-decoration: none;
  font-family: inherit;
  font-size: inherit;
  transition: color 0.2s ease;
  cursor: pointer;

  /* reset the button defaults */
  background: none;
  border: none;
  outline: none;
}

/* hover/active states just like your <a> links */
button.navbar-link:hover,
button.navbar-link.active {
  color: #fff;
}


--- resources/static/images/Amore_Ai_Tempi_1.jpg ---
Error reading file resources/static/images/Amore_Ai_Tempi_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Amore_Ai_Tempi_2.jpg ---
Error reading file resources/static/images/Amore_Ai_Tempi_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Cent_Anni_1.jpg ---
Error reading file resources/static/images/Cent_Anni_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Cent_Anni_2.jpg ---
Error reading file resources/static/images/Cent_Anni_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Gabriel_Garcia_Marquez.jpg ---
Error reading file resources/static/images/Gabriel_Garcia_Marquez.jpg: 'utf-8' codec can't decode byte 0xbe in position 16: invalid start byte

--- resources/static/images/Jane_Austen_coloured_version.jpg ---
Error reading file resources/static/images/Jane_Austen_coloured_version.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Orgoglio_E_Pregiudizio_1.jpg ---
Error reading file resources/static/images/Orgoglio_E_Pregiudizio_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Orgoglio_E_Pregiudizio_2.jpg ---
Error reading file resources/static/images/Orgoglio_E_Pregiudizio_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Ragione_E_Sentimento_1.jpg ---
Error reading file resources/static/images/Ragione_E_Sentimento_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Ragione_E_Sentimento_2.jpg ---
Error reading file resources/static/images/Ragione_E_Sentimento_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/placeholder.jpg ---
Error reading file resources/static/images/placeholder.jpg: 'utf-8' codec can't decode byte 0xba in position 4: invalid start byte

--- resources/templates/admin/author.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/author.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/admin/books}" class="navbar-link">Libri</a>
          <a th:href="@{/admin/authors}" class="navbar-link active">Autori</a>
          <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
      <div class="author-card">
        <img th:if="${author.photo==null}"
             src="/images/placeholder.jpg" 
             alt="Nessuna foto autore">
        <img th:unless="${author.photo==null}"
             th:src="${author.photo.name}" 
             th:alt="'Foto di ' + ${author.getFullName()}">
        <div th:text="'Nome: ' + ${author.name}"></div>
        <div th:text="'Cognome: ' + ${author.surname}"></div>
        <div th:text="'Nato il: ' + ${author.birthDate}"></div>
        <div th:if="${author.deathDate!=null}" th:text="'Morto il: ' + ${author.deathDate}"></div>
        <div th:text="'Nazionalità: ' + ${#strings.capitalize(#strings.toLowerCase(author.nationality))}"></div>
      </div>

      <div th:if="${author.books != null and !author.books.empty}">
          <div th:if="${author.books.empty}" class="empty-message">
            Nessun libro disponibile
          </div>

          <div th:unless="${author.books.empty}" class="books-grid">
            <div th:each="book : ${author.books}" class="book-card">
              <div class="book-cover-wrapper">
                <img th:if="${book.images != null and !book.images.empty}"
                    th:src="${book.images[0].name}"
                    th:alt="'Copertina di ' + ${book.title}" />
                <img th:unless="${book.images != null and !book.images.empty}"
                    src="/images/placeholder.jpg"
                    alt="Nessuna immagine disponibile" />
              </div>
              <div class="book-info">
                <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
              </div>
            </div>
          </div>

        </div>
      </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/admin/authors.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/authors.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>
  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/admin/books}" class="navbar-link">Libri</a>
            <a th:href="@{/admin/authors}" class="navbar-link active">Autori</a>
            <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="main-content">
      <div th:if="${authors.empty}" class="no-content">
        Nessun autore disponibile
      </div>
      <div th:unless="${authors.empty}" class="authors-grid">
        <div th:each="author : ${authors}" class="author-card">
          <img
            th:if="${author.photo == null}"
            src="/images/placeholder.jpg"
            alt="Nessuna immagine autore"
          />
          <img
            th:if="${author.photo != null}"
            th:src="${author.photo.name}"
            alt="Immagine autore"
          />
          <div class="author-info">
            <h2 th:text="${author.getFullName()}">Full Name</h2>
            <a
              th:href="@{'/admin/authors/' + ${author.id}}"
              class="view-details-link"
              >Dettagli</a
            >

            <form
              th:action="@{'/admin/authors/' + ${author.id}}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/admin/book.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/book.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/admin/books}" class="navbar-link active">Libri</a>
            <a th:href="@{/admin/authors}" class="navbar-link">Autori</a>
            <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="details-container">
      <div class="book-details">
        <!-- Section IMAGES ORIZZONTALI -->
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(book.images)}">
            <div th:each="img : ${book.images}" class="image-item">
              <img
                th:src="@{${img.name}}"
                class="book-img"
                th:alt="'Immagine del libro ' + ${book.title}"
              />
            </div>
          </div>
          <!-- Placeholder for no images -->
          <div
            th:if="${#lists.isEmpty(book.images)}"
            class="no-images-placeholder"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <!-- Book Information Section -->
        <div class="book-info">
          <h1 class="book-title" th:text="${book.title}">Titolo del Libro</h1>
          <!-- Authors Section -->
          <div class="info-section">
            <h2>Autori</h2>
            <div class="authors-list">
              <a
                th:each="author : ${book.authors}"
                th:href="@{'/admin/authors/' + ${author.id}}"
                class="author-link"
                th:text="${author.name + ' ' + author.surname}"
              >
                Nome Autore
              </a>
            </div>
          </div>
          <!-- Publication Year Section -->
          <div class="info-section">
            <h2>Anno di Pubblicazione</h2>
            <p th:text="${book.publicationYear}">2023</p>
          </div>
        </div>
      </div>
      <!-- Reviews Section -->
      <div class="info-section">
        <h2>Recensioni</h2>
        <!-- Reviews List -->
        <div class="reviews-list" th:if="${not #lists.isEmpty(book.reviews)}">
          <div th:each="review : ${book.reviews}" class="review-item">
            <h4
              class="review-title"
              th:text="'Titolo: ' + ${review.title} + ' [ ' + ${review.user.nome} + ' ' + ${review.user.cognome} + ' ]'"
            >
              Titolo recensione
            </h4>
            <p class="review-text">Testo:</p>
            <p class="review-text" th:text="${review.text}">
              Testo della recensione
            </p>
            <p
              class="review-rating"
              th:text="${'Valutazione: ' + review.mark + '/5'}"
            >
              Valutazione: 5/5
            </p>
            <form
              th:action="@{'/admin/review/' + ${review.id} + '/delete'}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
        <!-- No Reviews Message -->
        <div class="reviews-list" th:if="${#lists.isEmpty(book.reviews)}">
          <h3 class="review-empty">Nessuna recensione</h3>
        </div>

        <div th:unless="${hasReview}">
          <form
            th:action="@{'/admin/' + ${user.id} + '/books/' + ${book.id} + '/review'}"
            method="post"
            class="review-form"
          >
            <!-- CSRF -->
            <input
              type="hidden"
              th:name="${_csrf.parameterName}"
              th:value="${_csrf.token}"
            />

            <input type="text" name="title" placeholder="Titolo" required />
            <textarea
              name="text"
              placeholder="Testo della recensione"
              required
            ></textarea>
            <select name="mark" required>
              <option value="" disabled selected>Valutazione</option>
              <option
                th:each="i : ${#numbers.sequence(1,5)}"
                th:value="${i}"
                th:text="${i}"
              >
                1
              </option>
            </select>
            <button type="submit">Invia Recensione</button>
          </form>
        </div>

        <div th:if="${hasReview}" class="already-reviewed">
          Hai già commentato!
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/admin/books.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <title>Catalogo Libri</title>
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
    <link rel="stylesheet" th:href="@{/css/books.css}" />
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/admin/books}" class="navbar-link active">Libri</a>
            <a th:href="@{/admin/authors}" class="navbar-link">Autori</a>
            <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="main-content">
      <div th:if="${books.empty}" class="empty-message">
        Nessun libro disponibile
      </div>

      <div th:unless="${books.empty}" class="books-grid">
        <div th:each="book : ${books}" class="book-card">
          <div class="book-cover-wrapper">
            <img
              th:if="${book.images != null and !book.images.empty}"
              th:src="${book.images[0].name}"
              th:alt="'Copertina di ' + ${book.title}"
            />
            <img
              th:unless="${book.images != null and !book.images.empty}"
              src="/images/placeholder.jpg"
              alt="Nessuna immagine disponibile"
            />
          </div>
          <div class="book-info">
            <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
            <a
              th:href="@{'/admin/books/' + ${book.id}}"
              class="view-details-link"
            >
              Dettagli
            </a>

            <form
              th:action="@{'/admin/books/' + ${book.id}}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/admin/profile.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/admin/books}" class="navbar-link">Libri</a>
          <a th:href="@{/admin/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link active">Profilo</a>
          <form th:action="@{/logout}" method="post" style="display:inline">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <h1 th:text="'Bentornato ' + ${user.nome}">Bentornato Mario</h1>
    <p th:text="${user.nome}">Mario</p>
    <p th:text="${user.cognome}">Rossi</p>
    <p th:text="${user.email}">example@gmail.com</p>


  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>


</body>
</html>



--- resources/templates/admin_book_form.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8" />
  <title th:text="${action=='create' ? 'Nuovo libro' : 'Modifica libro'}">Libro</title>
</head>
<body>
<h1 th:text="${action=='create' ? 'Inserisci nuovo libro' : 'Modifica libro'}"></h1>

<!-- FORM CREAZIONE -->
<form th:if="${action=='create'}"
      th:action="@{/admin/books}"
      th:object="${book}"
      method="post">

  <div>
    <label>Titolo:
      <input type="text" th:field="*{title}" required />
    </label>
  </div>

  <div>
    <label>Anno di pubblicazione:
      <input type="number" th:field="*{publicationYear}" min="0" required />
    </label>
  </div>

  <button type="submit">Crea</button>
  <a th:href="@{/books}">Annulla</a>
</form>

<!-- FORM MODIFICA -->
<form th:if="${action=='edit'}"
      th:action="@{/admin/books/{id}/edit(id=${book.id})}"
      th:object="${book}"
      method="post">

  <div>
    <label>Titolo:
      <input type="text" th:field="*{title}" required />
    </label>
  </div>

  <div>
    <label>Anno di pubblicazione:
      <input type="number" th:field="*{publicationYear}" min="0" required />
    </label>
  </div>

  <button type="submit">Aggiorna</button>
  <a th:href="@{/books}">Annulla</a>
</form>

</body>
</html>


--- resources/templates/author.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/author.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

    <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
      <div class="navbar-links-group">
        <h1 class="navbar-Title">SiwBooks</h1>
      </div>
      <div class="navbar-links-group">
        <a th:href="@{/}" class="navbar-link">Home</a>
        <a th:href="@{/books}" class="navbar-link">Libri</a>
        <a th:href="@{/authors}" class="navbar-link active">Autori</a>
        <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
      <div class="author-card">
        <img th:if="${author.photo==null}"
             src="/images/placeholder.jpg" 
             alt="Nessuna foto autore">
        <img th:unless="${author.photo==null}"
             th:src="${author.photo.name}" 
             th:alt="'Foto di ' + ${author.getFullName()}">
        <div th:text="'Nome: ' + ${author.name}"></div>
        <div th:text="'Cognome: ' + ${author.surname}"></div>
        <div th:text="'Nato il: ' + ${author.birthDate}"></div>
        <div th:if="${author.deathDate!=null}" th:text="'Morto il: ' + ${author.deathDate}"></div>
        <div th:text="'Nazionalità: ' + ${#strings.capitalize(#strings.toLowerCase(author.nationality))}"></div>
      </div>

      <div th:if="${author.books != null and !author.books.empty}">
          <div th:if="${author.books.empty}" class="empty-message">
            Nessun libro disponibile
          </div>

          <div th:unless="${author.books.empty}" class="books-grid">
            <div th:each="book : ${author.books}" class="book-card">
              <div class="book-cover-wrapper">
                <img th:if="${book.images != null and !book.images.empty}"
                    th:src="${book.images[0].name}"
                    th:alt="'Copertina di ' + ${book.title}" />
                <img th:unless="${book.images != null and !book.images.empty}"
                    src="/images/placeholder.jpg"
                    alt="Nessuna immagine disponibile" />
              </div>
              <div class="book-info">
                <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
              </div>
            </div>
          </div>

        </div>
      </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/authors.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/authors.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

    <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
      <div class="navbar-links-group">
        <h1 class="navbar-Title">SiwBooks</h1>
      </div>
      <div class="navbar-links-group">
        <a th:href="@{/}" class="navbar-link">Home</a>
        <a th:href="@{/books}" class="navbar-link">Libri</a>
        <a th:href="@{/authors}" class="navbar-link active">Autori</a>
        <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
    <div th:if="${authors.empty}" class="no-content"> 
        Nessun autore disponibile
    </div>
    <div th:unless="${authors.empty}" 
        class="authors-grid">
        <div th:each="author : ${authors}"
            class="author-card">
        <img th:if="${author.photo == null}"
            src="/images/placeholder.jpg"
            alt="Nessuna immagine autore"/>
        <img th:if="${author.photo != null}"
            th:src="${author.photo.name}"
            alt="Immagine autore"/>
        <div class="author-info">
            <h2 th:text="${author.getFullName()}">Full Name</h2>
            <a th:href="@{'/authors/' + ${author.id}}"
            class="view-details-link">Dettagli</a>
        </div>
        </div>
    </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/book.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/book.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/books}" class="navbar-link active">Libri</a>
            <a th:href="@{/authors}" class="navbar-link">Autori</a>
            <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
        </div>
      </nav>
    </header>

    <main class="details-container">
      <div class="book-details">
        <!-- Section IMAGES ORIZZONTALI -->
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(book.images)}">
            <div th:each="img : ${book.images}" class="image-item">
              <img
                th:src="@{${img.name}}"
                class="book-img"
                th:alt="'Immagine del libro ' + ${book.title}"
              />
            </div>
          </div>
          <!-- Placeholder for no images -->
          <div
            th:if="${#lists.isEmpty(book.images)}"
            class="no-images-placeholder"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <!-- Book Information Section -->
        <div class="book-info">
          <h1 class="book-title" th:text="${book.title}">Titolo del Libro</h1>
          <!-- Authors Section -->
          <div class="info-section">
            <h2>Autori</h2>
            <div class="authors-list">
              <a
                th:each="author : ${book.authors}"
                th:href="@{'/authors/' + ${author.id}}"
                class="author-link"
                th:text="${author.name + ' ' + author.surname}"
              >
                Nome Autore
              </a>
            </div>
          </div>
          <!-- Publication Year Section -->
          <div class="info-section">
            <h2>Anno di Pubblicazione</h2>
            <p th:text="${book.publicationYear}">2023</p>
          </div>
        </div>
      </div>
        <!-- Reviews Section -->
        <div class="info-section">
          <h2>Recensioni</h2>
          <!-- Reviews List -->
          <div class="reviews-list" th:if="${not #lists.isEmpty(book.reviews)}">
            <div th:each="review : ${book.reviews}" class="review-item">
              <h4
                class="review-title"
                th:text="'Titolo: ' + ${review.title} + ' [ ' + ${review.user.nome} + ' ' + ${review.user.cognome} + ' ]'"
              >
                Titolo recensione
              </h4>
              <p class="review-text">Testo:</p>
              <p class="review-text" th:text="${review.text}">
                Testo della recensione
              </p>
              <p
                class="review-rating"
                th:text="${'Valutazione: ' + review.mark + '/5'}"
              >
                Valutazione: 5/5
              </p>
            </div>
          </div>
          <!-- No Reviews Message -->
          <div class="reviews-list" th:if="${#lists.isEmpty(book.reviews)}">
            <h3 class="review-empty">Nessuna recensione</h3>
          </div>
          <div class="login-to-review">
            Per scrivere una recensione, <a th:href="@{/login}">accedi qui</a>.
          </div>
        </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/books.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/books}" class="navbar-link active">Libri</a>
          <a th:href="@{/authors}" class="navbar-link">Autori</a>
          <a th:href="@{/login}" class="navbar-link">Accedi</a>
        </div>
      </div>
    </nav>
  </header>

  <main class="main-content">
    <div th:if="${books.empty}" class="empty-message">
      Nessun libro disponibile
    </div>

    <div th:unless="${books.empty}" class="books-grid">
      <div th:each="book : ${books}" class="book-card">
        <div class="book-cover-wrapper">
          <img th:if="${book.images != null and !book.images.empty}"
               th:src="${book.images[0].name}"
               th:alt="'Copertina di ' + ${book.title}" />
          <img th:unless="${book.images != null and !book.images.empty}"
               src="/images/placeholder.jpg"
               alt="Nessuna immagine disponibile" />
        </div>
        <div class="book-info">
          <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
          <a th:href="@{'/books/' + ${book.id}}"
             class="view-details-link">
            Dettagli
          </a>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>

</body>
</html>


--- resources/templates/error.html ---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8"/>
    <title>Errore - Siwbooks</title>
    <style>
      body { font-family: sans-serif; margin: 2em; }
      h1 { color: #c00; }
      .details p { margin: 0.5em 0; }
    </style>
</head>
<body>
    <h1>Si è verificato un errore</h1>
    <div class="details">
      <p th:text="'Status: ' + ${status}">Status: ?</p>
      <p th:text="'Errore: ' + ${error}">Errore: ?</p>
      <p th:text="'Messaggio: ' + ${message}">Messaggio: ?</p>
      <p th:text="'Path: ' + ${path}">Path: ?</p>
      <p th:text="'Timestamp: ' + ${timestamp}">Timestamp: ?</p>
    </div>
    <p><a th:href="@{/}">← Torna alla pagina principale</a></p>
</body>
</html>


--- resources/templates/login.html ---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head><title>Login</title></head>
<body>
  <h1>Accedi</h1>
  <form th:action="@{/login}" method="post">
    <div><label>Username: <input name="username"/></label></div>
    <div><label>Password: <input type="password" name="pwd"/></label></div>
    <button type="submit">Login</button>
    <div th:if="${param.error}">Credenziali non valide</div>

    <p class="register-prompt"> Non hai un account?
      <a href="/register" class="register-link">Registrati qui</a>
    </p>
  </form>
</body>
</html>


--- resources/templates/register.html ---
<form th:action="@{/register}" th:object="${credentials}" method="post">
  <div>
    <label>Username: <input th:field="*{username}"/></label>
    <div th:if="${#fields.hasErrors('username')}" th:errors="*{username}"></div>
  </div>
  <div>
    <label>Password: <input type="password" th:field="*{password}"/></label>
    <div th:if="${#fields.hasErrors('password')}" th:errors="*{password}"></div>
  </div>
  <div>
    <label>Nome: <input th:field="*{user.nome}"/></label>
  </div>
  <div>
    <label>Cognome: <input th:field="*{user.cognome}"/></label>
  </div>
  <div>
    <label>Email: <input th:field="*{user.email}"/></label>
  </div>
  <button type="submit">Registrati</button>
</form>


--- resources/templates/review_edit.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Modifica recensione</title>
</head>
<body>

<h1>Modifica la tua recensione</h1>

<form th:action="@{/books/{bookId}/reviews/{reviewId}/edit(
                     bookId=${bookId},
                     reviewId=${editReview.id})}"
      th:object="${editReview}"
      method="post">

  <div>
    <label>Titolo:
      <input type="text" th:field="*{title}" />
    </label>
    <div th:if="${#fields.hasErrors('title')}" th:errors="*{title}"></div>
  </div>

  <div>
    <label>Testo:
      <textarea th:field="*{text}"></textarea>
    </label>
    <div th:if="${#fields.hasErrors('text')}" th:errors="*{text}"></div>
  </div>

  <div>
    <label>Voto:
      <input type="number" min="1" max="5" th:field="*{mark}" />
    </label>
    <div th:if="${#fields.hasErrors('mark')}" th:errors="*{mark}"></div>
  </div>

  <button type="submit">Aggiorna</button>
  <a th:href="@{'/books/' + ${bookId}}">Annulla</a>
</form>

</body>
</html>


--- resources/templates/user/author.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/author.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link active">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
      <div class="author-card">
        <img th:if="${author.photo==null}"
             src="/images/placeholder.jpg" 
             alt="Nessuna foto autore">
        <img th:unless="${author.photo==null}"
             th:src="${author.photo.name}" 
             th:alt="'Foto di ' + ${author.getFullName()}">
        <div th:text="'Nome: ' + ${author.name}"></div>
        <div th:text="'Cognome: ' + ${author.surname}"></div>
        <div th:text="'Nato il: ' + ${author.birthDate}"></div>
        <div th:if="${author.deathDate!=null}" th:text="'Morto il: ' + ${author.deathDate}"></div>
        <div th:text="'Nazionalità: ' + ${#strings.capitalize(#strings.toLowerCase(author.nationality))}"></div>
      </div>

      <div th:if="${author.books != null and !author.books.empty}">
          <div th:if="${author.books.empty}" class="empty-message">
            Nessun libro disponibile
          </div>

          <div th:unless="${author.books.empty}" class="books-grid">
            <div th:each="book : ${author.books}" class="book-card">
              <div class="book-cover-wrapper">
                <img th:if="${book.images != null and !book.images.empty}"
                    th:src="${book.images[0].name}"
                    th:alt="'Copertina di ' + ${book.title}" />
                <img th:unless="${book.images != null and !book.images.empty}"
                    src="/images/placeholder.jpg"
                    alt="Nessuna immagine disponibile" />
              </div>
              <div class="book-info">
                <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
              </div>
            </div>
          </div>

        </div>
      </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/user/authors.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/authors.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link active">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
    <div th:if="${authors.empty}" class="no-content"> 
        Nessun autore disponibile
    </div>
    <div th:unless="${authors.empty}" 
        class="authors-grid">
        <div th:each="author : ${authors}"
            class="author-card">
        <img th:if="${author.photo == null}"
            src="/images/placeholder.jpg"
            alt="Nessuna immagine autore"/>
        <img th:if="${author.photo != null}"
            th:src="${author.photo.name}"
            alt="Immagine autore"/>
        <div class="author-info">
            <h2 th:text="${author.getFullName()}">Full Name</h2>
            <a th:href="@{'/user/authors/' + ${author.id}}"
            class="view-details-link">Dettagli</a>
        </div>
        </div>
    </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/user/book.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/book.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>

  <body>
  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link active">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="details-container">
      <div class="book-details">
        <!-- Section IMAGES ORIZZONTALI -->
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(book.images)}">
            <div th:each="img : ${book.images}" class="image-item">
              <img
                th:src="@{${img.name}}"
                class="book-img"
                th:alt="'Immagine del libro ' + ${book.title}"
              />
            </div>
          </div>
          <!-- Placeholder for no images -->
          <div
            th:if="${#lists.isEmpty(book.images)}"
            class="no-images-placeholder"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <!-- Book Information Section -->
        <div class="book-info">
          <h1 class="book-title" th:text="${book.title}">Titolo del Libro</h1>
          <!-- Authors Section -->
          <div class="info-section">
            <h2>Autori</h2>
            <div class="authors-list">
              <a
                th:each="author : ${book.authors}"
                th:href="@{'/user/authors/' + ${author.id}}"
                class="author-link"
                th:text="${author.name + ' ' + author.surname}"
              >
                Nome Autore
              </a>
            </div>
          </div>
          <!-- Publication Year Section -->
          <div class="info-section">
            <h2>Anno di Pubblicazione</h2>
            <p th:text="${book.publicationYear}">2023</p>
          </div>
        </div>
      </div>
        <!-- Reviews Section -->
        <div class="info-section">
          <h2>Recensioni</h2>
          <!-- Reviews List -->
          <div class="reviews-list" th:if="${not #lists.isEmpty(book.reviews)}">
            <div th:each="review : ${book.reviews}" class="review-item">
              <h4
                class="review-title"
                th:text="'Titolo: ' + ${review.title} + ' [ ' + ${review.user.nome} + ' ' + ${review.user.cognome} + ' ]'"
              >
                Titolo recensione
              </h4>
              <p class="review-text">Testo:</p>
              <p class="review-text" th:text="${review.text}">
                Testo della recensione
              </p>
              <p
                class="review-rating"
                th:text="${'Valutazione: ' + review.mark + '/5'}"
              >
                Valutazione: 5/5
              </p>
            </div>
          </div>
          <!-- No Reviews Message -->
          <div class="reviews-list" th:if="${#lists.isEmpty(book.reviews)}">
            <h3 class="review-empty">Nessuna recensione</h3>
          </div>

        <div th:unless="${hasReview}">
          <form th:action="@{'/user/' + ${user.id} + '/books/' + ${book.id} + '/review'}"
                method="post"
                class="review-form">
            <!-- CSRF -->
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>

            <input type="text" name="title" placeholder="Titolo" required>
            <textarea name="text" placeholder="Testo della recensione" required></textarea>
            <select name="mark" required>
              <option value="" disabled selected>Valutazione</option>
              <option th:each = "i : ${#numbers.sequence(1,5)}"
                      th:value="${i}" th:text="${i}">1</option>
            </select>
            <button type="submit">Invia Recensione</button>
          </form>
        </div>

        <div th:if="${hasReview}" class="already-reviewed">
          Hai già commentato!
        </div>

        </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/user/books.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link active">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

  <main class="main-content">
    <div th:if="${books.empty}" class="empty-message">
      Nessun libro disponibile
    </div>

    <div th:unless="${books.empty}" class="books-grid">
      <div th:each="book : ${books}" class="book-card">
        <div class="book-cover-wrapper">
          <img th:if="${book.images != null and !book.images.empty}"
               th:src="${book.images[0].name}"
               th:alt="'Copertina di ' + ${book.title}" />
          <img th:unless="${book.images != null and !book.images.empty}"
               src="/images/placeholder.jpg"
               alt="Nessuna immagine disponibile" />
        </div>
        <div class="book-info">
          <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
          <a th:href="@{'/user/books/' + ${book.id}}"
             class="view-details-link">
            Dettagli
          </a>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>

</body>
</html>


--- resources/templates/user/profile.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link active">Profilo</a>
          <form th:action="@{/logout}" method="post" style="display:inline">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <h1 th:text="'Bentornato ' + ${user.nome}">Bentornato Mario</h1>
    <p th:text="${user.nome}">Mario</p>
    <p th:text="${user.cognome}">Rossi</p>
    <p th:text="${user.email}">example@gmail.com</p>


  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>


</body>
</html>

--- treepro.txt ---
PROJECT STRUCTURE :
main
├── .DS_Store
├── java/
│   ├── .DS_Store
│   └── it/
│       ├── .DS_Store
│       └── uniroma3/
│           ├── .DS_Store
│           └── siwbooks/
│               ├── SiwbooksApplication.java
│               ├── authentication/
│               │   ├── AuthConfiguration.java
│               │   └── SecurityBeansConfig.java
│               ├── constant/
│               │   └── Nationality.java
│               ├── controller/
│               │   ├── AdminAuthorController.java
│               │   ├── AdminBookController.java
│               │   ├── AuthorController.java
│               │   ├── BookController.java
│               │   ├── HomeController.java
│               │   ├── LoginController.java
│               │   ├── RegisterController.java
│               │   ├── ReviewController.java
│               │   └── UserController.java
│               ├── model/
│               │   ├── Author.java
│               │   ├── Book.java
│               │   ├── Credentials.java
│               │   ├── ImageEntity.java
│               │   ├── Review.java
│               │   └── User.java
│               ├── repository/
│               │   ├── AuthorRepository.java
│               │   ├── BookRepository.java
│               │   ├── CredentialsRepository.java
│               │   ├── ImageEntityRepository.java
│               │   ├── ReviewRepository.java
│               │   └── UserRepository.java
│               └── service/
│                   ├── AuthorService.java
│                   ├── BookService.java
│                   ├── CredentialsService.java
│                   ├── ImageEntityService.java
│                   ├── ReviewService.java
│                   └── UserService.java
└── resources/
    ├── application.properties
    ├── import.sql
    ├── static/
    │   ├── css/
    │   │   ├── author.css
    │   │   ├── authors.css
    │   │   ├── book.css
    │   │   ├── books.css
    │   │   └── layout.css
    │   └── images/
    │       ├── Amore_Ai_Tempi_1.jpg
    │       ├── Amore_Ai_Tempi_2.jpg
    │       ├── Cent_Anni_1.jpg
    │       ├── Cent_Anni_2.jpg
    │       ├── Gabriel_Garcia_Marquez.jpg
    │       ├── Jane_Austen_coloured_version.jpg
    │       ├── Orgoglio_E_Pregiudizio_1.jpg
    │       ├── Orgoglio_E_Pregiudizio_2.jpg
    │       ├── Ragione_E_Sentimento_1.jpg
    │       ├── Ragione_E_Sentimento_2.jpg
    │       └── placeholder.jpg
    └── templates/
        ├── admin/
        │   ├── author.html
        │   ├── authors.html
        │   ├── book.html
        │   ├── books.html
        │   └── profile.html
        ├── admin_book_form.html
        ├── author.html
        ├── authors.html
        ├── book.html
        ├── books.html
        ├── error.html
        ├── login.html
        ├── register.html
        ├── review_edit.html
        └── user/
            ├── author.html
            ├── authors.html
            ├── book.html
            ├── books.html
            └── profile.html


SELECTED FILES:
- java/it/uniroma3/siwbooks/SiwbooksApplication.java
- java/it/uniroma3/siwbooks/authentication/AuthConfiguration.java
- java/it/uniroma3/siwbooks/authentication/SecurityBeansConfig.java
- java/it/uniroma3/siwbooks/constant/Nationality.java
- java/it/uniroma3/siwbooks/controller/AdminAuthorController.java
- java/it/uniroma3/siwbooks/controller/AdminBookController.java
- java/it/uniroma3/siwbooks/controller/AuthorController.java
- java/it/uniroma3/siwbooks/controller/BookController.java
- java/it/uniroma3/siwbooks/controller/HomeController.java
- java/it/uniroma3/siwbooks/controller/LoginController.java
- java/it/uniroma3/siwbooks/controller/RegisterController.java
- java/it/uniroma3/siwbooks/controller/ReviewController.java
- java/it/uniroma3/siwbooks/controller/UserController.java
- java/it/uniroma3/siwbooks/model/Author.java
- java/it/uniroma3/siwbooks/model/Book.java
- java/it/uniroma3/siwbooks/model/Credentials.java
- java/it/uniroma3/siwbooks/model/ImageEntity.java
- java/it/uniroma3/siwbooks/model/Review.java
- java/it/uniroma3/siwbooks/model/User.java
- java/it/uniroma3/siwbooks/repository/AuthorRepository.java
- java/it/uniroma3/siwbooks/repository/BookRepository.java
- java/it/uniroma3/siwbooks/repository/CredentialsRepository.java
- java/it/uniroma3/siwbooks/repository/ImageEntityRepository.java
- java/it/uniroma3/siwbooks/repository/ReviewRepository.java
- java/it/uniroma3/siwbooks/repository/UserRepository.java
- java/it/uniroma3/siwbooks/service/AuthorService.java
- java/it/uniroma3/siwbooks/service/BookService.java
- java/it/uniroma3/siwbooks/service/CredentialsService.java
- java/it/uniroma3/siwbooks/service/ImageEntityService.java
- java/it/uniroma3/siwbooks/service/ReviewService.java
- java/it/uniroma3/siwbooks/service/UserService.java
- resources/application.properties
- resources/import.sql
- resources/static/css/author.css
- resources/static/css/authors.css
- resources/static/css/book.css
- resources/static/css/books.css
- resources/static/css/layout.css
- resources/static/images/Amore_Ai_Tempi_1.jpg
- resources/static/images/Amore_Ai_Tempi_2.jpg
- resources/static/images/Cent_Anni_1.jpg
- resources/static/images/Cent_Anni_2.jpg
- resources/static/images/Gabriel_Garcia_Marquez.jpg
- resources/static/images/Jane_Austen_coloured_version.jpg
- resources/static/images/Orgoglio_E_Pregiudizio_1.jpg
- resources/static/images/Orgoglio_E_Pregiudizio_2.jpg
- resources/static/images/Ragione_E_Sentimento_1.jpg
- resources/static/images/Ragione_E_Sentimento_2.jpg
- resources/static/images/placeholder.jpg
- resources/templates/admin/author.html
- resources/templates/admin/authors.html
- resources/templates/admin/book.html
- resources/templates/admin/books.html
- resources/templates/admin/profile.html
- resources/templates/admin_book_form.html
- resources/templates/author.html
- resources/templates/authors.html
- resources/templates/book.html
- resources/templates/books.html
- resources/templates/error.html
- resources/templates/login.html
- resources/templates/register.html
- resources/templates/review_edit.html
- resources/templates/user/author.html
- resources/templates/user/authors.html
- resources/templates/user/book.html
- resources/templates/user/books.html
- resources/templates/user/profile.html

CONTENT OF SELECTED FILES:

--- java/it/uniroma3/siwbooks/SiwbooksApplication.java ---
package it.uniroma3.siwbooks;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SiwbooksApplication {

	public static void main(String[] args) {
		SpringApplication.run(SiwbooksApplication.class, args);
	}

}


--- java/it/uniroma3/siwbooks/authentication/AuthConfiguration.java ---
package it.uniroma3.siwbooks.authentication;

import static it.uniroma3.siwbooks.model.Credentials.ADMIN_ROLE;
import static it.uniroma3.siwbooks.model.Credentials.DEFAULT_ROLE;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import static org.springframework.security.config.Customizer.withDefaults;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import it.uniroma3.siwbooks.service.CredentialsService;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;

@Configuration
@EnableWebSecurity
public class AuthConfiguration {
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private CredentialsService credentialsService;

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication().dataSource(dataSource)
				.authoritiesByUsernameQuery("SELECT username, role from credentials WHERE username=?")
				.usersByUsernameQuery("SELECT username, password, 1 as enabled FROM credentials WHERE username=?");
	}


	@Bean
	protected SecurityFilterChain configure(final HttpSecurity httpSecurity) throws Exception {
        httpSecurity.csrf(withDefaults()).cors(cors -> cors.disable()).authorizeHttpRequests(requests -> requests
                // Consentiti a tutti (occasionali)
                .requestMatchers(HttpMethod.GET, "/", "/index", "/books/**", "/authors/**",
                        "/login", "/register", "/css/**", "/images/**", "favicon.ico")
                .permitAll().requestMatchers(HttpMethod.POST, "/register", "/login", "/images/**")
                .permitAll()

                // Solo ADMIN_ROLE
                .requestMatchers("/admin/**").hasAuthority(ADMIN_ROLE)

                // Solo DEFAULT_ROLE
                .requestMatchers("/user/**").hasAuthority(DEFAULT_ROLE)

                // Qualunque altra richiesta: autenticazione
                .anyRequest().authenticated()).formLogin(login -> login.loginPage("/login") // Pagina di login di default
                // per tutti
                .loginProcessingUrl("/login") // URL di submit form login user
                .usernameParameter("username").passwordParameter("pwd")
                .successHandler((request, response, authentication) -> {
                    // Success handler custom: redirect in base al ruolo
                    var principal = authentication.getPrincipal();
                    // Recupero id utente dal Principal
                    Long idUtente = null;
                    String username = null;
                    if (principal instanceof org.springframework.security.core.userdetails.UserDetails userDetails) {
                        // Ottieni ID utente qui secondo la tua implementazione
                        // Esempio: CredentialsService -> trova utente per username
                        username = userDetails.getUsername();
                        idUtente = this.credentialsService.findByUsername(username).getUser().getId();

                    }
                    boolean isAdmin = this.credentialsService.findByUsername(username).getRole().equals(ADMIN_ROLE);
                    if (isAdmin) {
                        // Se ADMIN, redirect operatore (sostituisci idUtente)
                        response.sendRedirect(idUtente != null ? "/admin/books" : "/login");
                    } else {
                        // Se Utente, redirect utente (sostituisci idUtente)
                        response.sendRedirect(idUtente != null ? "/user/books" : "/login");
                    }
                }).failureUrl("/login?error=true").permitAll()).logout(logout -> logout.logoutUrl("/logout")
                .logoutSuccessUrl("/").invalidateHttpSession(true).deleteCookies("JSESSIONID")
                .clearAuthentication(true).permitAll());
		return httpSecurity.build();
	}
}


--- java/it/uniroma3/siwbooks/authentication/SecurityBeansConfig.java ---
// src/main/java/it/uniroma3/siwbooks/auth/SecurityBeansConfig.java
package it.uniroma3.siwbooks.authentication;

import org.springframework.context.annotation.*;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityBeansConfig {
  @Bean
  public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }
}


--- java/it/uniroma3/siwbooks/constant/Nationality.java ---
package it.uniroma3.siwbooks.constant;

public enum Nationality {
    ITALY,
    UK,
    USA, 
    FRANCE, 
    GERMANY, 
    JAPAN,
    COLOMBIA
}



--- java/it/uniroma3/siwbooks/controller/AdminAuthorController.java ---
// src/main/java/it/uniroma3/siwbooks/controller/admin/AdminBookController.java
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.service.AuthorService;
import it.uniroma3.siwbooks.service.BookService;

@Controller
public class AdminAuthorController {

    @Autowired 
    private BookService bookService;

    @Autowired 
    private AuthorService authorService;

    @PostMapping("/admin/authors/{id}")
    public String deleteBook(@PathVariable("id") Long id){
        authorService.deleteById(id);
        return "redirect:/admin/authors";
    }
}


--- java/it/uniroma3/siwbooks/controller/AdminBookController.java ---
// src/main/java/it/uniroma3/siwbooks/controller/admin/AdminBookController.java
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.service.AuthorService;
import it.uniroma3.siwbooks.service.BookService;

@Controller
public class AdminBookController {

    @Autowired 
    private BookService bookService;

    @Autowired 
    private AuthorService authorService;

    @PostMapping("/admin/books/{id}")
    public String deleteBook(@PathVariable("id") Long id){
        bookService.deleteById(id);
        return "redirect:/admin/books";
    }
}


--- java/it/uniroma3/siwbooks/controller/AuthorController.java ---
package it.uniroma3.siwbooks.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import it.uniroma3.siwbooks.model.Author;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.AuthorService;
import it.uniroma3.siwbooks.service.UserService;

@Controller
public class AuthorController {

    @Autowired
    public AuthorService authorService;

    @Autowired
    public UserService userService;

    @GetMapping("/authors")
    public String listAuthors(Model model){
        model.addAttribute("authors", this.authorService.findAll());
        return "authors";
    }

    @GetMapping("/authors/{id}")
    public String viewAuthor(@PathVariable Long id ,Model model){
        Author author = authorService.findById(id);

        if(author==null){
            return "error";
        }
        model.addAttribute("author", author);
        return "author";
    }

    @GetMapping("/user/authors")
    public String listUserAuthors(Model model){
        User user = userService.getCurrentUser();
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("authors", this.authorService.findAll());
        return "user/authors";
    }

    @GetMapping("/user/authors/{id}")
    public String viewUserAuthor(@PathVariable Long id ,Model model){
        Author author = authorService.findById(id);
        User user = userService.getCurrentUser();

        if(author==null){
            return "error";
        }
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("author", author);
        return "user/author";
    }

    @GetMapping("/admin/authors")
    public String listAdminAuthors(Model model){
        User user = userService.getCurrentUser();
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("authors", this.authorService.findAll());
        return "admin/authors";
    }

    @GetMapping("/admin/authors/{id}")
    public String viewAdminAuthor(@PathVariable Long id ,Model model){
        Author author = authorService.findById(id);
        User user = userService.getCurrentUser();

        if(author==null){
            return "error";
        }
        if(user == null){
            return "redirect:/login";
        } 
        model.addAttribute("user", user);
        model.addAttribute("author", author);
        return "admin/author";
    }
}

--- java/it/uniroma3/siwbooks/controller/BookController.java ---
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.BookService;
import it.uniroma3.siwbooks.service.ReviewService;
import it.uniroma3.siwbooks.service.UserService;

@Controller
public class BookController {

    @Autowired
    private BookService bookService;
    @Autowired
    private UserService userService;
    @Autowired
    private ReviewService reviewService;


    @GetMapping("/books")
    public String listBooks(Model model) {
        model.addAttribute("books", bookService.findAll());
        return "books";
    }

    @GetMapping("/books/{id}")
    public String viewBook(@PathVariable("id") Long id, Model model) {
        Book book = bookService.findById(id);
        if(book == null){
            return "error";
        }
        model.addAttribute("book", book);

        return "book";
    }

    @GetMapping("/user/books")
    public String listUserBooks(Model model) {
        User user = userService.getCurrentUser();
        if (user == null){
            return "redirect:/login";
        }

        model.addAttribute("books", bookService.findAll());
        model.addAttribute("user", user);
        return "user/books";
    }

    @GetMapping("/user/books/{id}")
    public String viewUserBook(@PathVariable("id") Long id, Model model) {
        Book book = bookService.findById(id);
        User user = userService.getCurrentUser();

        if(book == null){
            return "error.html";
        }
        if (user == null){
            return "redirect:/login";
        }
        boolean hasReview = reviewService.existsByUserAndBook(user, book);
        model.addAttribute("hasReview", hasReview);
        model.addAttribute("book", book);
        model.addAttribute("user", user);
        return "user/book";
    }
    @GetMapping("/admin/books")
    public String listAdminBooks(Model model) {
        User user = userService.getCurrentUser();
        if (user == null){
            return "redirect:/login";
        }

        model.addAttribute("books", bookService.findAll());
        model.addAttribute("user", user);
        return "admin/books";
    }

    @GetMapping("/admin/books/{id}")
    public String viewAdminBook(@PathVariable("id") Long id, Model model) {
        Book book = bookService.findById(id);
        User user = userService.getCurrentUser();

        if(book == null){
            return "error.html";
        }
        if (user == null){
            return "redirect:/login";
        }
        boolean hasReview = reviewService.existsByUserAndBook(user, book);
        model.addAttribute("hasReview", hasReview);
        model.addAttribute("book", book);
        model.addAttribute("user", user);
        return "admin/book";
    }
}



--- java/it/uniroma3/siwbooks/controller/HomeController.java ---
// src/main/java/it/uniroma3/siwbooks/controller/HomeController.java
package it.uniroma3.siwbooks.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String home() {
        // forward root → your list of books
        return "redirect:/books";
    }
}



--- java/it/uniroma3/siwbooks/controller/LoginController.java ---
package it.uniroma3.siwbooks.controller;

import java.util.Optional;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String login(@RequestParam Optional<String> error, Model model) {
        model.addAttribute("loginError", error.isPresent());
        return "login";
    }
}



--- java/it/uniroma3/siwbooks/controller/RegisterController.java ---
package it.uniroma3.siwbooks.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import it.uniroma3.siwbooks.model.Credentials;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.CredentialsService;

@Controller
public class RegisterController {

    @Autowired
    private CredentialsService credentialsService;

    /**
     * Mostra la pagina di registrazione.
     */
    @GetMapping("/register")
	public String showRegister(Model model) {
		model.addAttribute("user", new User());
		model.addAttribute("credentials", new Credentials());
		return "register";
	}


    /**
     * Processa il form di registrazione.
    */
    @PostMapping("/register")
    public String registerUser(
        @Valid @ModelAttribute("credentials") Credentials credentials,
        BindingResult binding
    ) {
        if (credentialsService.existsByUsername(credentials.getUsername())) {
            binding.rejectValue("username","error.credentials","Username già esistente");
        }
        if (binding.hasErrors()) return "register";

        // role e user già collegati
        credentials.setRole(Credentials.DEFAULT_ROLE);
        credentialsService.save(credentials);
        return "redirect:/login?registered";
    }

}



--- java/it/uniroma3/siwbooks/controller/ReviewController.java ---
package it.uniroma3.siwbooks.controller;


import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;


import it.uniroma3.siwbooks.model.Book;

import it.uniroma3.siwbooks.model.Review;
import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.service.*;

@Controller
public class ReviewController {

    @Autowired 
    private ReviewService reviewService;

    @Autowired 
    private CredentialsService credentialsService;

    @Autowired 
    private UserService userService;

    @Autowired 
    private BookService bookService;

    private boolean verifyId(Long id1, Long id2){
        return Objects.equals(id1, id2);
    }


    @PostMapping("/user/{userId}/books/{bookId}/review")
    public String addReview(@PathVariable("userId") Long userId,
                            @PathVariable("bookId")  Long bookId,
                            @RequestParam("title") String title,
                            @RequestParam("text") String text,
                            @RequestParam("mark") int mark,
                            Model model) {
        Book book = this.bookService.findById(bookId);
        User user = this.userService.getCurrentUser();

        if (book == null || user == null || !verifyId(userId, user.getId())){
            return "redirect:/login";
        }

        boolean hasReview = reviewService.existsByUserAndBook(user, book);

        model.addAttribute("hasReview", hasReview);

        this.reviewService.save(new Review(title, mark, text, user, book));
        return "redirect:/user/books/" + bookId;
    }

    @PostMapping("/admin/{userId}/books/{bookId}/review")
    public String addAdminReview(@PathVariable("userId") Long userId,
                            @PathVariable("bookId")  Long bookId,
                            @RequestParam("title") String title,
                            @RequestParam("text") String text,
                            @RequestParam("mark") int mark,
                            Model model) {
        Book book = this.bookService.findById(bookId);
        User user = this.userService.getCurrentUser();

        if (book == null || user == null || !verifyId(userId, user.getId())){
            return "redirect:/login";
        }

        boolean hasReview = reviewService.existsByUserAndBook(user, book);

        model.addAttribute("hasReview", hasReview);

        this.reviewService.save(new Review(title, mark, text, user, book));
        return "redirect:/admin/books/" + bookId;
    }

    @PostMapping("/admin/review/{id}/delete")
    public String deleteReview(@PathVariable("id") Long id){
        User user = this.userService.getCurrentUser();
        Review review = reviewService.findById(id);
        Book book = review.getBook();

        if (book == null || user == null){
            return "redirect:/login";
        }

        reviewService.deleteById(id);
        return "redirect:/admin/books/" + book.getId();
    }
}


--- java/it/uniroma3/siwbooks/controller/UserController.java ---
package it.uniroma3.siwbooks.controller;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import it.uniroma3.siwbooks.service.CredentialsService;
import it.uniroma3.siwbooks.service.UserService;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import it.uniroma3.siwbooks.model.User;


@Controller
public class UserController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private CredentialsService credentialsService;

    private boolean verifyId(Long idUrl, Long idUser) {
		return idUser!= null && Objects.equals(idUrl, idUser);
	}

    @GetMapping("/user/{id}")
    public String showProfile(@PathVariable("id") Long id,
            @RequestParam(value="showPasswordModal", required = false, defaultValue = "false") boolean showPasswordModal,
            Model model) {
        User user = userService.getCurrentUser();
        if (!verifyId(id, user.getId())){
            return "redirect:/login";
        }
        model.addAttribute("showPasswordModal", showPasswordModal);
        model.addAttribute("user", user);
        return "user/profile";
    }

    @GetMapping("/admin/{id}")
    public String showAdminProfile(@PathVariable("id") Long id,
            @RequestParam(value="showPasswordModal", required = false, defaultValue = "false") boolean showPasswordModal,
            Model model) {
        User user = userService.getCurrentUser();
        if (!verifyId(id, user.getId())){
            return "redirect:/login";
        }
        model.addAttribute("showPasswordModal", showPasswordModal);
        model.addAttribute("user", user);
        return "admin/profile";
    }
}

--- java/it/uniroma3/siwbooks/model/Author.java ---

package it.uniroma3.siwbooks.model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.springframework.format.annotation.DateTimeFormat;

import it.uniroma3.siwbooks.constant.Nationality;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToOne;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.PastOrPresent;



@Entity
public class Author {
    @Id
    @GeneratedValue
    private Long id;

    @NotEmpty
    private String name;

    @NotEmpty
    private String surname;

    @NotNull
    @Past
    @DateTimeFormat(pattern = "dd-MM-yyyy")
    private LocalDate birthDate;

    @PastOrPresent
    @DateTimeFormat(pattern = "dd-MM-yyyy")
    private LocalDate deathDate;

    @NotNull
	@Enumerated(EnumType.STRING)
    private Nationality nationality;


    @ManyToMany(mappedBy = "authors", cascade = CascadeType.ALL)
    private List<Book> books = new ArrayList<>();

    @OneToOne(cascade = CascadeType.ALL)
	private ImageEntity photo;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public LocalDate getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
    }

    public LocalDate getDeathDate() {
        return deathDate;
    }

    public void setDeathDate(LocalDate deathDate) {
        this.deathDate = deathDate;
    }

    public Nationality getNationality() {
        return nationality;
    }

    public void setNationality(Nationality nationality) {
        this.nationality = nationality;
    }

    public List<Book> getBooks() {
        return books;
    }

    public void setBooks(List<Book> books) {
        this.books = books;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Author author = (Author) o;

        return id != null ? id.equals(author.id) : author.id == null;
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }

    public ImageEntity getPhoto() {
        return photo;
    }

    public void setPhoto(ImageEntity photo) {
        this.photo = photo;
    }

    public String getFullName() {
        return this.name + " " + this.surname;
    }
}


--- java/it/uniroma3/siwbooks/model/Book.java ---
package it.uniroma3.siwbooks.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;

@Entity
public class Book {

    @Id 
    @GeneratedValue
    private Long id;

    private String title;
    private Integer publicationYear;

    /* --- relazioni ---------------------------------------------------- */

    @ManyToMany
    private Set<Author> authors = new HashSet<>();

    @OneToMany(cascade = CascadeType.ALL)
    private List<ImageEntity> images = new ArrayList<>();

    @OneToMany(
      mappedBy = "book",
      cascade = CascadeType.ALL,
      orphanRemoval = true
    )
    private List<Review> reviews = new ArrayList<>();
    
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getPublicationYear() {
        return publicationYear;
    }

    public void setPublicationYear(Integer publicationYear) {
        this.publicationYear = publicationYear;
    }

    public Set<Author> getAuthors() {
        return authors;
    }

    public void setAuthors(Set<Author> authors) {
        this.authors = authors;
    }

    public List<ImageEntity> getImages() {
        return images;
    }

    public void setImages(List<ImageEntity> images) {
        this.images = images;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Book)) return false;
        Book book = (Book) o;
        return id != null && id.equals(book.id);
    }

    @Override
    public int hashCode() {
        return 31 + (id == null ? 0 : id.hashCode());
    }

    public List<Review> getReviews() {
        return reviews;
    }

    public void setReviews(List<Review> reviews) {
        this.reviews = reviews;
    }
}

--- java/it/uniroma3/siwbooks/model/Credentials.java ---
package it.uniroma3.siwbooks.model;

import java.util.Objects;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.validation.constraints.NotEmpty;

@Entity
public class Credentials {

    public static final String DEFAULT_ROLE = "DEFAULT";
    public static final String ADMIN_ROLE   = "ADMIN";

    @Id @GeneratedValue 
    private Long id;

    @NotEmpty 
    private String username;
    
    @NotEmpty 
    private String password;

    @NotEmpty 
    private String role = DEFAULT_ROLE;

    @OneToOne(cascade = CascadeType.ALL)
    private User user;
	
	public String getUsername() {
		return username;
	}
	
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	
	public void setUsername(String username) {
		this.username = username;
	}
	
	public String getPassword() {
		return password;
	}
	
	public void setPassword(String password) {
		this.password = password;
	}
	
	public String getRole() {
		return role;
	}
	
	public void setRole(String role) {
		this.role = role;
	}

	@Override
	public int hashCode() {
		return Objects.hash(username);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Credentials other = (Credentials) obj;
		return Objects.equals(username, other.username);
	}

	
}


--- java/it/uniroma3/siwbooks/model/ImageEntity.java ---
package it.uniroma3.siwbooks.model;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;


@Entity
public class ImageEntity {

    public static final String PATH = "/images/";   // prefisso URL

    @Id @GeneratedValue
    private Long id;

    @NotNull
    private String name;            // es. "/images/holmes.jpg"

    
    @Autowired
    protected ImageEntity() { }                 // JPA


    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }


    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ImageEntity other = (ImageEntity) obj;
		return Objects.equals(name, other.name);
	}

}



--- java/it/uniroma3/siwbooks/model/Review.java ---
package it.uniroma3.siwbooks.model;
import java.util.Objects;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

@Entity
public class Review {

    public Review(@NotEmpty @NotNull String title, @Min(1) @Max(5) int mark, @NotEmpty @NotNull String text, User user,
            Book book) {
        this.title = title;
        this.mark = mark;
        this.text = text;
        this.user = user;
        this.book = book;
    }

    public Review() {
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @NotEmpty
    @NotNull
    private String title;

    @Min(1) @Max(5)
    private int mark; 

    @NotEmpty
    @NotNull
    @Column(length=2000)
    private String text;

    @ManyToOne()
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    private Book book;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public int getMark() {
        return mark;
    }

    public void setMark(int mark) {
        this.mark = mark;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 41 * hash + Objects.hashCode(this.id);
        hash = 41 * hash + Objects.hashCode(this.title);
        hash = 41 * hash + this.mark;
        hash = 41 * hash + Objects.hashCode(this.text);
        hash = 41 * hash + Objects.hashCode(this.user);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Review other = (Review) obj;
        if (this.mark != other.mark) {
            return false;
        }
        if (!Objects.equals(this.title, other.title)) {
            return false;
        }
        if (!Objects.equals(this.text, other.text)) {
            return false;
        }
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        return Objects.equals(this.user, other.user);
    }

    public Book getBook() {
        return book;
    }

    public void setBook(Book book) {
        this.book = book;
    }

}

--- java/it/uniroma3/siwbooks/model/User.java ---
package it.uniroma3.siwbooks.model;

import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

@Entity
@Table(name = "users")
@SequenceGenerator(
  name = "users_seq_gen",      // un nome a tua scelta
  sequenceName = "users_seq",  // la sequenza che hai creato in import.sql
  allocationSize = 50          // deve corrispondere all'INCREMENT BY di users_seq
)
public class User {

    @Id
    @GeneratedValue(
      strategy = GenerationType.SEQUENCE,
      generator = "users_seq_gen"
    )
    private Long id;

    @NotNull @NotEmpty
    private String nome;

    @NotNull @NotEmpty
    private String cognome;

    @NotNull @NotEmpty
    private String email;

    @OneToMany(mappedBy="user", cascade=CascadeType.ALL)
    private List<Review> recensioni;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getCognome() {
        return cognome;
    }

    public void setCognome(String cognome) {
        this.cognome = cognome;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public List<Review> getRecensioni() {
        return recensioni;
    }

    public void setRecensioni(List<Review> recensioni) {
        this.recensioni = recensioni;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return id != null && id.equals(user.id);
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}


--- java/it/uniroma3/siwbooks/repository/AuthorRepository.java ---
package it.uniroma3.siwbooks.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import it.uniroma3.siwbooks.model.Author;

public interface AuthorRepository extends JpaRepository<Author, Long>{

}


--- java/it/uniroma3/siwbooks/repository/BookRepository.java ---
package it.uniroma3.siwbooks.repository;

import it.uniroma3.siwbooks.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}


--- java/it/uniroma3/siwbooks/repository/CredentialsRepository.java ---
package it.uniroma3.siwbooks.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.siwbooks.model.Credentials;
import it.uniroma3.siwbooks.model.User;

// CredentialsRepository.java
public interface CredentialsRepository extends JpaRepository<Credentials, Long> {

    Optional<Credentials> findByUsername(String username);
    boolean existsByUsername(String username);
}




--- java/it/uniroma3/siwbooks/repository/ImageEntityRepository.java ---

package it.uniroma3.siwbooks.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.siwbooks.model.ImageEntity;

public interface ImageEntityRepository extends JpaRepository<ImageEntity, Long> { }


--- java/it/uniroma3/siwbooks/repository/ReviewRepository.java ---
package it.uniroma3.siwbooks.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import it.uniroma3.siwbooks.model.*;
import java.util.Optional;

public interface ReviewRepository extends JpaRepository<Review, Long> {
  boolean existsByUserAndBook(User user, Book book);
  Optional<Review> findByUserAndBook(User user, Book book);
}


--- java/it/uniroma3/siwbooks/repository/UserRepository.java ---
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

package it.uniroma3.siwbooks.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import it.uniroma3.siwbooks.model.User;

public interface UserRepository extends JpaRepository<User, Long> {

}


--- java/it/uniroma3/siwbooks/service/AuthorService.java ---
package it.uniroma3.siwbooks.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siwbooks.model.Author;
import it.uniroma3.siwbooks.repository.AuthorRepository;

@Service
public class AuthorService {
    @Autowired
    public AuthorRepository authorRepository;
    
    public List<Author> findAll() {
        return authorRepository.findAll();
    }

    public Author findById(Long id) {
        return authorRepository.findById(id).orElse(null);
    }

    public void save(Author author){
        authorRepository.save(author);
    }

    public void deleteById(Long id){
        authorRepository.deleteById(id);
    }
}

--- java/it/uniroma3/siwbooks/service/BookService.java ---
// src/main/java/it/uniroma3/siwbooks/service/BookService.java
package it.uniroma3.siwbooks.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siwbooks.model.Book;
import it.uniroma3.siwbooks.repository.BookRepository;

@Service
public class BookService {

    @Autowired private BookRepository repo;

    public List<Book> findAll(){
         return repo.findAll(); 
        }

    public Book findById(Long id){
        return repo.findById(id).orElse(null); 
    }

    /** inserisce o aggiorna */
    public Book save(Book b){ 
        return repo.save(b); 
    }

    public void deleteById(Long id){
        repo.deleteById(id);
    }
}


--- java/it/uniroma3/siwbooks/service/CredentialsService.java ---
// src/main/java/it/uniroma3/siwbooks/service/CredentialsService.java
package it.uniroma3.siwbooks.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import static it.uniroma3.siwbooks.model.Credentials.ADMIN_ROLE;
import static it.uniroma3.siwbooks.model.Credentials.DEFAULT_ROLE;

import it.uniroma3.siwbooks.model.Credentials;
import it.uniroma3.siwbooks.repository.CredentialsRepository;
import jakarta.validation.Valid;

import it.uniroma3.siwbooks.model.User;

@Service
public class CredentialsService {

    @Autowired
    private CredentialsRepository credentialsRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /** Per recuperare l’utente in BookController */
    public Credentials findByUsername(String username) {
        return credentialsRepository.findByUsername(username).orElse(null);
    }

    public void save(@Valid Credentials credentials) {
        credentials.setRole(DEFAULT_ROLE);
        credentials.setPassword(this.passwordEncoder.encode(credentials.getPassword()));
        credentialsRepository.save(credentials);
    }

    public boolean existsByUsername(String u) {
        return credentialsRepository.existsByUsername(u);
    }

    public User getCurrentUser(){
        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        return this.findByUsername(userDetails.getUsername()).getUser();
    }
}


--- java/it/uniroma3/siwbooks/service/ImageEntityService.java ---
package it.uniroma3.siwbooks.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import it.uniroma3.siwbooks.model.ImageEntity;
import it.uniroma3.siwbooks.repository.ImageEntityRepository;
import jakarta.transaction.Transactional;

import static it.uniroma3.siwbooks.model.ImageEntity.PATH;

@Service
public class ImageEntityService {
    
	@Autowired
    private ImageEntityRepository imageEntityRepository;
	
    @Value("${upload.dir}")
    private String uploadDir;

    public ImageEntity getImage(Long id) {
        return imageEntityRepository.findById(id).orElse(null);
    }
}


--- java/it/uniroma3/siwbooks/service/ReviewService.java ---
package it.uniroma3.siwbooks.service;

import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import it.uniroma3.siwbooks.model.*;
import it.uniroma3.siwbooks.repository.*;

@Service
public class ReviewService {

    @Autowired private ReviewRepository reviewRepo;
    @Autowired private BookRepository   bookRepo;
    @Autowired private UserRepository   userRepo;


    public void save(Review review) {
        if (reviewRepo.existsByUserAndBook(review.getUser(), review.getBook())) {
        throw new IllegalStateException("Hai già recensito questo libro");
    }
       reviewRepo.save(review);
    }

    public boolean existsByUserAndBook(User user, Book book){
        return reviewRepo.existsByUserAndBook(user, book);
    }

    public Review findById(Long id){
        return reviewRepo.findById(id).orElse(null);
    }

    public void deleteById(Long id){
        reviewRepo.deleteById(id);
    }
}


--- java/it/uniroma3/siwbooks/service/UserService.java ---
package it.uniroma3.siwbooks.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siwbooks.model.User;
import it.uniroma3.siwbooks.repository.UserRepository;
import jakarta.validation.Valid;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
	private CredentialsService credentialsService;

    public User getCurrentUser(){
        return credentialsService.getCurrentUser();
    }

    public User findById(Long id){
        return userRepository.findById(id).orElse(null);
    }

    public void save(@Valid User user){
        userRepository.save(user);
    }
}

--- resources/application.properties ---
#==================================
# = Application
#==================================
spring.application.name=siwbooks

#==================================
# = Datasource
#==================================
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace

# ricrea lo schema a ogni avvio in dev
spring.jpa.hibernate.ddl-auto=create

# esegue import.sql sempre
spring.sql.init.mode=ALWAYS

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/siwbooks
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#==================================
# = Web server
#==================================
server.port=8080
server.error.whitelabel.enabled=false
server.error.include-stacktrace=always

#==================================
# = Thymeleaf
#==================================
spring.thymeleaf.enabled=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=UTF-8

spring.web.resources.static-locations=classpath:/static/

#==================================
# = Messages
#==================================
spring.messages.basename=messages/messages
spring.messages.encoding=UTF-8

#==================================
# = Formattazione date/ora
#==================================
spring.mvc.format.date=dd/MM/yyyy
spring.mvc.format.date-time=dd/MM/yyyy HH:mm

#==================================
# = Upload di file (immagini)
#==================================
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB
upload.dir=./src/main/resources/static/images

#==================================
# = Sicurezza
#==================================
# eventuali proprietà di CORS o personalizzazioni Security vanno aggiunte qui
spring.devtools.restart.polling=true
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=400


--- resources/import.sql ---
-- IMMAGINI
INSERT INTO image_entity (id, name) VALUES (1, '/images/Orgoglio_E_Pregiudizio_1.jpg');
INSERT INTO image_entity (id, name) VALUES (2, '/images/Orgoglio_E_Pregiudizio_2.jpg');
INSERT INTO image_entity (id, name) VALUES (3, '/images/Cent_Anni_1.jpg');
INSERT INTO image_entity (id, name) VALUES (4, '/images/Cent_Anni_2.jpg');
INSERT INTO image_entity (id, name) VALUES (5, '/images/Ragione_E_Sentimento_1.jpg');
INSERT INTO image_entity (id, name) VALUES (6, '/images/Ragione_E_Sentimento_2.jpg');
INSERT INTO image_entity (id, name) VALUES (7, '/images/Amore_Ai_Tempi_1.jpg');
INSERT INTO image_entity (id, name) VALUES (8, '/images/Amore_Ai_Tempi_2.jpg');
INSERT INTO image_entity (id, name) VALUES (9, '/images/Jane_Austen_coloured_version.jpg');
INSERT INTO image_entity (id, name) VALUES (10, '/images/Gabriel_Garcia_Marquez.jpg');

-- AUTORI
INSERT INTO author (id, name, surname, birth_date, death_date, nationality, photo_id) VALUES (1, 'Jane', 'Austen', '1775-12-16', '1817-07-18', 'UK', 9);
INSERT INTO author (id, name, surname, birth_date, death_date, nationality, photo_id) VALUES (2, 'Gabriel', 'García Márquez', '1927-03-06', '2014-04-17', 'COLOMBIA', 10);

-- LIBRI
INSERT INTO book (id, title, publication_year) VALUES (1, 'Orgoglio e Pregiudizio', 1813);
INSERT INTO book (id, title, publication_year) VALUES (2, 'Ragione e Sentimento', 1811);
INSERT INTO book (id, title, publication_year) VALUES (3, 'Cent anni di solitudine', 1967);
INSERT INTO book (id, title, publication_year) VALUES (4, 'L amore ai tempi del colera', 1985);


-- RELAZIONE LIBRI-AUTORI
INSERT INTO book_authors (authors_id, books_id) VALUES (1, 1);
INSERT INTO book_authors (authors_id, books_id) VALUES (1, 2);
INSERT INTO book_authors (authors_id, books_id) VALUES (2, 3);
INSERT INTO book_authors (authors_id, books_id) VALUES (2, 4);

-- RELAZIONE LIBRO-IMMAGINI
INSERT INTO book_images (book_id, images_id) VALUES (1, 1);
INSERT INTO book_images (book_id, images_id) VALUES (1, 2);
INSERT INTO book_images (book_id, images_id) VALUES (2, 3);
INSERT INTO book_images (book_id, images_id) VALUES (2, 4);
INSERT INTO book_images (book_id, images_id) VALUES (3, 5);
INSERT INTO book_images (book_id, images_id) VALUES (3, 6);
INSERT INTO book_images (book_id, images_id) VALUES (4, 7);
INSERT INTO book_images (book_id, images_id) VALUES (4, 8);


-- UTENTI
INSERT INTO users (id, nome, cognome, email) VALUES (1, 'Alice', 'Bianchi', 'alice@example.com');
INSERT INTO users (id, nome, cognome, email) VALUES (2, 'Mario', 'Rossi', 'mario.rossi@uniroma3.it');

-- RECENSIONI
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (1, 'Un capolavoro',               'La profondità dei personaggi e il dialogo brillante lo rendono indimenticabile.', 5, 1, 1);
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (2, 'Emozionante',                 'Una storia di sentimenti e doveri che cattura il cuore ad ogni pagina.',            4, 2, 2);
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (3, 'Avvolgente come un mito',     'La saga della famiglia Buendía è epica, magica e struggente allo stesso tempo.',      5, 3, 1);
INSERT INTO review (id, title, text, mark, book_id, user_id) VALUES (4, 'Storia d’amore intensa',      'La passione e la nostalgia di Florentino e Fermina restano impresse nella mente.',   4, 4, 2);


-- password = admin (BCrypt: cambia se vuoi)
INSERT INTO credentials (id, username, password, role, user_id) VALUES (10, 'admin', '$2a$12$IHPBPKzSiG5TExakOPaLKuGDlpHoElnteQe4kRoc2n3RUAADPb6q2', 'ADMIN', 1);
-- password = admin (BCrypt: cambia se vuoi)
INSERT INTO credentials (id, username, password, role, user_id) VALUES (11, 'user', '$2a$12$UInFQ4nlMZYVIheDPzNrDOwxhRCa.hhKcH9uNmHdIYga0qOLC1MwW', 'DEFAULT', 2);

 
-- (Eventuali CREDENTIALS da preinserire, se ti servono)
-- INSERT INTO credentials (id, username, password, role, user_id) VALUES (1, 'alice', '$2a$10$…', 'DEFAULT', 1);

-- RIPRISTINO DELLE SEQUENZE PER EVITARE DUPLICATI
SELECT setval('author_seq',         (SELECT MAX(id) FROM author));
SELECT setval('book_seq',           (SELECT MAX(id) FROM book));
SELECT setval('image_entity_seq',   (SELECT MAX(id) FROM image_entity));
SELECT setval('users_seq',          (SELECT MAX(id) FROM users));
SELECT setval('review_seq',         (SELECT MAX(id) FROM review));
SELECT setval('credentials_seq', (SELECT MAX(id) FROM credentials));


--- resources/static/css/author.css ---
/* author.css */

/* Contenitore principale */
.main-content {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Scheda autore */
.author-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.author-card img {
  width: 160px;
  height: 160px;
  object-fit: cover;
  border-radius: 50%;
  margin-bottom: 1rem;
}

.author-card div {
  font-family: 'Open Sans', sans-serif;
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

/* Messaggio vuoto */
.empty-message {
  text-align: center;
  margin: 2rem 0;
  font-family: 'Open Sans', sans-serif;
  color: #666;
}

/* Griglia dei libri */
.books-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 1rem;
  margin-top: 2rem;
}

/* Scheda libro */
.book-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s, box-shadow 0.2s;
}

.book-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

/* Wrapper copertina libro */
.book-cover-wrapper {
  width: 100%;
  height: 180px;
  background: #f0f0f0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.book-cover-wrapper img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Info libro */
.book-info {
  padding: 1rem;
  text-align: center;
}

.book-title {
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  margin: 0;
}


--- resources/static/css/authors.css ---
/* authors.css */

/* 1) grid container */
.authors-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 1.5rem;
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Empty-state */
.no-content {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
  font-family: 'Open Sans', sans-serif;
  text-align: center;
  color: #777;
}

/* 2) each card */
.author-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s, box-shadow 0.2s;
}
.author-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

.author-card img {
  width: 100%;
  aspect-ratio: 1 / 1;
  object-fit: cover;
  display: block;
}

/* 4) text & button area */
.author-info {
  padding: 1rem;
  text-align: center;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.author-info h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

/* 5) view-details link */
.view-details-link {
  display: inline-block;
  margin-top: 0.5rem;
  padding: 0.5rem 1rem;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
  color: #fff;
  background-color: #333;
  border-radius: 4px;
  text-decoration: none;
  transition: background-color 0.2s;
}
.view-details-link:hover {
  background-color: #555;
}


/* DELETE */

.card-actions {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

.delete-form {
  display: inline;
}

.delete-button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  background-color: #ff5252;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.delete-button:hover {
  background-color: #e04848;
}


--- resources/static/css/book.css ---
/* book.css */

/* Contenitore principale */
.details-container {
  max-width: 1000px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Layout due colonne per immagine + info */
.book-details {
  display: flex;
  gap: 2rem;
}
@media (max-width: 768px) {
  .book-details {
    flex-direction: column;
  }
}

/* Sezione immagini */
.images-container {
  flex: 1;
}
.images-grid {
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  padding-bottom: 0.5rem;
}
.image-item {
  flex: 0 0 auto;
}
.book-img {
  display: block;
  max-height: 200px;
  width: auto;
  border-radius: 4px;
}

/* Placeholder quando non ci sono immagini */
.no-images-placeholder {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  text-align: center;
}

/* Sezione informazioni libro */
.book-info {
  flex: 2;
  display: flex;
  flex-direction: column;
}
.book-title {
  font-family: 'Merriweather', serif;
  font-size: 2rem;
  margin-bottom: 1rem;
}

/* Sottosezioni (Autori, Anno, Recensioni…) */
.info-section {
  margin-bottom: 1.5rem;
}
.info-section h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

/* Lista autori */
.authors-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}
.author-link {
  font-family: 'Open Sans', sans-serif;
  color: #333;
  text-decoration: none;
  padding: 0.25rem 0.5rem;
  border: 1px solid #333;
  border-radius: 4px;
  transition: background-color 0.2s, color 0.2s;
}
.author-link:hover {
  background-color: #333;
  color: #fff;
}

/* Recensioni */
.reviews-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.review-item {
  border-top: 1px solid #e0e0e0;
  padding-top: 1rem;
}
.review-title {
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  margin: 0 0 0.5rem;
}
.review-text {
  font-family: 'Open Sans', sans-serif;
  margin: 0.25rem 0;
}
.review-rating {
  font-weight: bold;
  margin-top: 0.5rem;
}
.review-empty {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  font-style: italic;
}

.login-to-review {
  background: #fff8e1;
  border: 1px solid #ffe082;
  padding: 0.75rem 1rem;
  margin-bottom: 1rem;
  border-radius: 4px;
  font-family: 'Open Sans', sans-serif;
}

.login-to-review a {
  color: #ff8f00;
  text-decoration: none;
  font-weight: bold;
}

.login-to-review a:hover {
  text-decoration: underline;
}
/* FORM */

/* Review form */
.review-form {
  margin-top: 2rem;
  margin-bottom: 3rem;
  padding: 1.5rem;
  background-color: #fafafa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  font-family: 'Open Sans', sans-serif;
}

.review-form input[type="text"],
.review-form textarea,
.review-form select {
  width: 100%;
  padding: 0.75rem;
  font-size: 1rem;
  line-height: 1.4;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  transition: border-color 0.2s;
}

.review-form input[type="text"]::placeholder,
.review-form textarea::placeholder {
  color: #999;
}

.review-form input[type="text"]:focus,
.review-form textarea:focus,
.review-form select:focus {
  border-color: #333;
}

.review-form button {
  align-self: flex-start;
  padding: 0.75rem 1.5rem;
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.review-form button:hover {
  background-color: #555;
}

/* Messaggio “Hai già commentato!” */
.already-reviewed {
  background-color: #fff8e1;
  border: 1px solid #ffe082;
  padding: 1rem;
  margin-bottom: 2rem;
  border-radius: 4px;
  font-family: 'Open Sans', sans-serif;
  color: #333;
}

/* DELETE */

.card-actions {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

.delete-form {
  display: inline;
}

.delete-button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  background-color: #ff5252;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.delete-button:hover {
  background-color: #e04848;
}


--- resources/static/css/books.css ---
/* books.css */

/* Grid container */
.books-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 1.5rem;
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Card base */
.book-card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: transform 0.2s, box-shadow 0.2s;
}
.book-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

/* Cover wrapper: fixed height, center & contain */
.book-cover-wrapper {
  width: 100%;
  height: 260px;
  background: #f0f0f0;
  display: flex;
  justify-content: center;
  align-items: center;
}
.book-cover-wrapper img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Info area */
.book-info {
  padding: 1rem;
  text-align: center;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.book-title {
  font-family: 'Merriweather', serif;
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
}

/* Details link/button */
.view-details-link {
  display: inline-block;
  margin-top: 0.5rem;
  padding: 0.5rem 1rem;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
  color: #fff;
  background-color: #333;
  border-radius: 4px;
  text-decoration: none;
  transition: background-color 0.2s;
}
.view-details-link:hover {
  background-color: #555;
}

/* Empty message */
.empty-message {
  text-align: center;
  margin: 2rem;
  font-family: 'Open Sans', sans-serif;
  color: #666;
}

/* Responsive tweak */
@media (max-width: 600px) {
  .book-cover-wrapper {
    height: 180px;
  }
}

/* DELETE */

.card-actions {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

.delete-form {
  display: inline;
}

.delete-button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  background-color: #ff5252;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.delete-button:hover {
  background-color: #e04848;
}



--- resources/static/css/layout.css ---
/* layout.css */

/* Reset some defaults */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* HEADER */
.header {
  background-color: #333;
  color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0.5rem 1rem;
}

.navbar-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.navbar-links-group {
  display: flex;
  align-items: center;
}

.navbar-Title {
  font-family: 'Merriweather', serif;
  font-size: 1.5rem;
  margin-right: 2rem;
}


.navbar-link {
  display: inline-block;
  padding: 0.5rem 1rem;
  color: #ddd;
  text-decoration: none;
  transition: color 0.2s ease;
}

button.navbar-link {
  /* remove default button styles */
  background: none;
  border: none;
  /* preserve your link padding & sizing */
  display: inline-block;
  padding: 0.5rem 1rem;
  /* grab the same font/color/hover you already have */
  font-family: inherit;
  color: inherit;
  text-decoration: none;
  transition: color 0.2s ease;
  cursor: pointer;
}

/* hover state */
.navbar-link:hover {
  color: #fff;
}

/* active page state */
.navbar-link.active {
  color: #fff;
  border-bottom: 2px solid #fff;
}
/* FOOTER */
.footer {
  background-color: #f5f5f5;
  color: #555;
  border-top: 1px solid #e0e0e0;
}

.footer-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
  text-align: center;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
}


/* make our inline logout form sit in the link-group */
.navbar-links-group form {
  display: inline; 
  margin: 0;     /* reset any browser form margins */
}

/* style <button class="navbar-link"> exactly like your links */
button.navbar-link {
  /* inherit all the .navbar-link settings */
  display: inline-block;
  padding: 0.5rem 1rem;
  color: #ddd;
  text-decoration: none;
  font-family: inherit;
  font-size: inherit;
  transition: color 0.2s ease;
  cursor: pointer;

  /* reset the button defaults */
  background: none;
  border: none;
  outline: none;
}

/* hover/active states just like your <a> links */
button.navbar-link:hover,
button.navbar-link.active {
  color: #fff;
}


--- resources/static/images/Amore_Ai_Tempi_1.jpg ---
Error reading file resources/static/images/Amore_Ai_Tempi_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Amore_Ai_Tempi_2.jpg ---
Error reading file resources/static/images/Amore_Ai_Tempi_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Cent_Anni_1.jpg ---
Error reading file resources/static/images/Cent_Anni_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Cent_Anni_2.jpg ---
Error reading file resources/static/images/Cent_Anni_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Gabriel_Garcia_Marquez.jpg ---
Error reading file resources/static/images/Gabriel_Garcia_Marquez.jpg: 'utf-8' codec can't decode byte 0xbe in position 16: invalid start byte

--- resources/static/images/Jane_Austen_coloured_version.jpg ---
Error reading file resources/static/images/Jane_Austen_coloured_version.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Orgoglio_E_Pregiudizio_1.jpg ---
Error reading file resources/static/images/Orgoglio_E_Pregiudizio_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Orgoglio_E_Pregiudizio_2.jpg ---
Error reading file resources/static/images/Orgoglio_E_Pregiudizio_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Ragione_E_Sentimento_1.jpg ---
Error reading file resources/static/images/Ragione_E_Sentimento_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Ragione_E_Sentimento_2.jpg ---
Error reading file resources/static/images/Ragione_E_Sentimento_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/placeholder.jpg ---
Error reading file resources/static/images/placeholder.jpg: 'utf-8' codec can't decode byte 0xba in position 4: invalid start byte

--- resources/templates/admin/author.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/author.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/admin/books}" class="navbar-link">Libri</a>
          <a th:href="@{/admin/authors}" class="navbar-link active">Autori</a>
          <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
      <div class="author-card">
        <img th:if="${author.photo==null}"
             src="/images/placeholder.jpg" 
             alt="Nessuna foto autore">
        <img th:unless="${author.photo==null}"
             th:src="${author.photo.name}" 
             th:alt="'Foto di ' + ${author.getFullName()}">
        <div th:text="'Nome: ' + ${author.name}"></div>
        <div th:text="'Cognome: ' + ${author.surname}"></div>
        <div th:text="'Nato il: ' + ${author.birthDate}"></div>
        <div th:if="${author.deathDate!=null}" th:text="'Morto il: ' + ${author.deathDate}"></div>
        <div th:text="'Nazionalità: ' + ${#strings.capitalize(#strings.toLowerCase(author.nationality))}"></div>
      </div>

      <div th:if="${author.books != null and !author.books.empty}">
          <div th:if="${author.books.empty}" class="empty-message">
            Nessun libro disponibile
          </div>

          <div th:unless="${author.books.empty}" class="books-grid">
            <div th:each="book : ${author.books}" class="book-card">
              <div class="book-cover-wrapper">
                <img th:if="${book.images != null and !book.images.empty}"
                    th:src="${book.images[0].name}"
                    th:alt="'Copertina di ' + ${book.title}" />
                <img th:unless="${book.images != null and !book.images.empty}"
                    src="/images/placeholder.jpg"
                    alt="Nessuna immagine disponibile" />
              </div>
              <div class="book-info">
                <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
              </div>
            </div>
          </div>

        </div>
      </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/admin/authors.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/authors.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>
  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/admin/books}" class="navbar-link">Libri</a>
            <a th:href="@{/admin/authors}" class="navbar-link active">Autori</a>
            <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="main-content">
      <div th:if="${authors.empty}" class="no-content">
        Nessun autore disponibile
      </div>
      <div th:unless="${authors.empty}" class="authors-grid">
        <div th:each="author : ${authors}" class="author-card">
          <img
            th:if="${author.photo == null}"
            src="/images/placeholder.jpg"
            alt="Nessuna immagine autore"
          />
          <img
            th:if="${author.photo != null}"
            th:src="${author.photo.name}"
            alt="Immagine autore"
          />
          <div class="author-info">
            <h2 th:text="${author.getFullName()}">Full Name</h2>
            <a
              th:href="@{'/admin/authors/' + ${author.id}}"
              class="view-details-link"
              >Dettagli</a
            >

            <form
              th:action="@{'/admin/authors/' + ${author.id}}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/admin/book.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/book.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/admin/books}" class="navbar-link active">Libri</a>
            <a th:href="@{/admin/authors}" class="navbar-link">Autori</a>
            <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="details-container">
      <div class="book-details">
        <!-- Section IMAGES ORIZZONTALI -->
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(book.images)}">
            <div th:each="img : ${book.images}" class="image-item">
              <img
                th:src="@{${img.name}}"
                class="book-img"
                th:alt="'Immagine del libro ' + ${book.title}"
              />
            </div>
          </div>
          <!-- Placeholder for no images -->
          <div
            th:if="${#lists.isEmpty(book.images)}"
            class="no-images-placeholder"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <!-- Book Information Section -->
        <div class="book-info">
          <h1 class="book-title" th:text="${book.title}">Titolo del Libro</h1>
          <!-- Authors Section -->
          <div class="info-section">
            <h2>Autori</h2>
            <div class="authors-list">
              <a
                th:each="author : ${book.authors}"
                th:href="@{'/admin/authors/' + ${author.id}}"
                class="author-link"
                th:text="${author.name + ' ' + author.surname}"
              >
                Nome Autore
              </a>
            </div>
          </div>
          <!-- Publication Year Section -->
          <div class="info-section">
            <h2>Anno di Pubblicazione</h2>
            <p th:text="${book.publicationYear}">2023</p>
          </div>
        </div>
      </div>
      <!-- Reviews Section -->
      <div class="info-section">
        <h2>Recensioni</h2>
        <!-- Reviews List -->
        <div class="reviews-list" th:if="${not #lists.isEmpty(book.reviews)}">
          <div th:each="review : ${book.reviews}" class="review-item">
            <h4
              class="review-title"
              th:text="'Titolo: ' + ${review.title} + ' [ ' + ${review.user.nome} + ' ' + ${review.user.cognome} + ' ]'"
            >
              Titolo recensione
            </h4>
            <p class="review-text">Testo:</p>
            <p class="review-text" th:text="${review.text}">
              Testo della recensione
            </p>
            <p
              class="review-rating"
              th:text="${'Valutazione: ' + review.mark + '/5'}"
            >
              Valutazione: 5/5
            </p>
            <form
              th:action="@{'/admin/review/' + ${review.id} + '/delete'}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
        <!-- No Reviews Message -->
        <div class="reviews-list" th:if="${#lists.isEmpty(book.reviews)}">
          <h3 class="review-empty">Nessuna recensione</h3>
        </div>

        <div th:unless="${hasReview}">
          <form
            th:action="@{'/admin/' + ${user.id} + '/books/' + ${book.id} + '/review'}"
            method="post"
            class="review-form"
          >
            <!-- CSRF -->
            <input
              type="hidden"
              th:name="${_csrf.parameterName}"
              th:value="${_csrf.token}"
            />

            <input type="text" name="title" placeholder="Titolo" required />
            <textarea
              name="text"
              placeholder="Testo della recensione"
              required
            ></textarea>
            <select name="mark" required>
              <option value="" disabled selected>Valutazione</option>
              <option
                th:each="i : ${#numbers.sequence(1,5)}"
                th:value="${i}"
                th:text="${i}"
              >
                1
              </option>
            </select>
            <button type="submit">Invia Recensione</button>
          </form>
        </div>

        <div th:if="${hasReview}" class="already-reviewed">
          Hai già commentato!
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/admin/books.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <title>Catalogo Libri</title>
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
    <link rel="stylesheet" th:href="@{/css/books.css}" />
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/admin/books}" class="navbar-link active">Libri</a>
            <a th:href="@{/admin/authors}" class="navbar-link">Autori</a>
            <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="main-content">
      <div th:if="${books.empty}" class="empty-message">
        Nessun libro disponibile
      </div>

      <div th:unless="${books.empty}" class="books-grid">
        <div th:each="book : ${books}" class="book-card">
          <div class="book-cover-wrapper">
            <img
              th:if="${book.images != null and !book.images.empty}"
              th:src="${book.images[0].name}"
              th:alt="'Copertina di ' + ${book.title}"
            />
            <img
              th:unless="${book.images != null and !book.images.empty}"
              src="/images/placeholder.jpg"
              alt="Nessuna immagine disponibile"
            />
          </div>
          <div class="book-info">
            <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
            <a
              th:href="@{'/admin/books/' + ${book.id}}"
              class="view-details-link"
            >
              Dettagli
            </a>

            <form
              th:action="@{'/admin/books/' + ${book.id}}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/admin/profile.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/admin/books}" class="navbar-link">Libri</a>
          <a th:href="@{/admin/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/admin/' + ${user.id}}" class="navbar-link active">Profilo</a>
          <form th:action="@{/logout}" method="post" style="display:inline">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <h1 th:text="'Bentornato ' + ${user.nome}">Bentornato Mario</h1>
    <p th:text="${user.nome}">Mario</p>
    <p th:text="${user.cognome}">Rossi</p>
    <p th:text="${user.email}">example@gmail.com</p>


  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>


</body>
</html>



--- resources/templates/admin_book_form.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8" />
  <title th:text="${action=='create' ? 'Nuovo libro' : 'Modifica libro'}">Libro</title>
</head>
<body>
<h1 th:text="${action=='create' ? 'Inserisci nuovo libro' : 'Modifica libro'}"></h1>

<!-- FORM CREAZIONE -->
<form th:if="${action=='create'}"
      th:action="@{/admin/books}"
      th:object="${book}"
      method="post">

  <div>
    <label>Titolo:
      <input type="text" th:field="*{title}" required />
    </label>
  </div>

  <div>
    <label>Anno di pubblicazione:
      <input type="number" th:field="*{publicationYear}" min="0" required />
    </label>
  </div>

  <button type="submit">Crea</button>
  <a th:href="@{/books}">Annulla</a>
</form>

<!-- FORM MODIFICA -->
<form th:if="${action=='edit'}"
      th:action="@{/admin/books/{id}/edit(id=${book.id})}"
      th:object="${book}"
      method="post">

  <div>
    <label>Titolo:
      <input type="text" th:field="*{title}" required />
    </label>
  </div>

  <div>
    <label>Anno di pubblicazione:
      <input type="number" th:field="*{publicationYear}" min="0" required />
    </label>
  </div>

  <button type="submit">Aggiorna</button>
  <a th:href="@{/books}">Annulla</a>
</form>

</body>
</html>


--- resources/templates/author.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/author.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

    <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
      <div class="navbar-links-group">
        <h1 class="navbar-Title">SiwBooks</h1>
      </div>
      <div class="navbar-links-group">
        <a th:href="@{/}" class="navbar-link">Home</a>
        <a th:href="@{/books}" class="navbar-link">Libri</a>
        <a th:href="@{/authors}" class="navbar-link active">Autori</a>
        <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
      <div class="author-card">
        <img th:if="${author.photo==null}"
             src="/images/placeholder.jpg" 
             alt="Nessuna foto autore">
        <img th:unless="${author.photo==null}"
             th:src="${author.photo.name}" 
             th:alt="'Foto di ' + ${author.getFullName()}">
        <div th:text="'Nome: ' + ${author.name}"></div>
        <div th:text="'Cognome: ' + ${author.surname}"></div>
        <div th:text="'Nato il: ' + ${author.birthDate}"></div>
        <div th:if="${author.deathDate!=null}" th:text="'Morto il: ' + ${author.deathDate}"></div>
        <div th:text="'Nazionalità: ' + ${#strings.capitalize(#strings.toLowerCase(author.nationality))}"></div>
      </div>

      <div th:if="${author.books != null and !author.books.empty}">
          <div th:if="${author.books.empty}" class="empty-message">
            Nessun libro disponibile
          </div>

          <div th:unless="${author.books.empty}" class="books-grid">
            <div th:each="book : ${author.books}" class="book-card">
              <div class="book-cover-wrapper">
                <img th:if="${book.images != null and !book.images.empty}"
                    th:src="${book.images[0].name}"
                    th:alt="'Copertina di ' + ${book.title}" />
                <img th:unless="${book.images != null and !book.images.empty}"
                    src="/images/placeholder.jpg"
                    alt="Nessuna immagine disponibile" />
              </div>
              <div class="book-info">
                <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
              </div>
            </div>
          </div>

        </div>
      </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/authors.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/authors.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

    <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
      <div class="navbar-links-group">
        <h1 class="navbar-Title">SiwBooks</h1>
      </div>
      <div class="navbar-links-group">
        <a th:href="@{/}" class="navbar-link">Home</a>
        <a th:href="@{/books}" class="navbar-link">Libri</a>
        <a th:href="@{/authors}" class="navbar-link active">Autori</a>
        <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
    <div th:if="${authors.empty}" class="no-content"> 
        Nessun autore disponibile
    </div>
    <div th:unless="${authors.empty}" 
        class="authors-grid">
        <div th:each="author : ${authors}"
            class="author-card">
        <img th:if="${author.photo == null}"
            src="/images/placeholder.jpg"
            alt="Nessuna immagine autore"/>
        <img th:if="${author.photo != null}"
            th:src="${author.photo.name}"
            alt="Immagine autore"/>
        <div class="author-info">
            <h2 th:text="${author.getFullName()}">Full Name</h2>
            <a th:href="@{'/authors/' + ${author.id}}"
            class="view-details-link">Dettagli</a>
        </div>
        </div>
    </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/book.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/book.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwBooks</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/books}" class="navbar-link active">Libri</a>
            <a th:href="@{/authors}" class="navbar-link">Autori</a>
            <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
        </div>
      </nav>
    </header>

    <main class="details-container">
      <div class="book-details">
        <!-- Section IMAGES ORIZZONTALI -->
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(book.images)}">
            <div th:each="img : ${book.images}" class="image-item">
              <img
                th:src="@{${img.name}}"
                class="book-img"
                th:alt="'Immagine del libro ' + ${book.title}"
              />
            </div>
          </div>
          <!-- Placeholder for no images -->
          <div
            th:if="${#lists.isEmpty(book.images)}"
            class="no-images-placeholder"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <!-- Book Information Section -->
        <div class="book-info">
          <h1 class="book-title" th:text="${book.title}">Titolo del Libro</h1>
          <!-- Authors Section -->
          <div class="info-section">
            <h2>Autori</h2>
            <div class="authors-list">
              <a
                th:each="author : ${book.authors}"
                th:href="@{'/authors/' + ${author.id}}"
                class="author-link"
                th:text="${author.name + ' ' + author.surname}"
              >
                Nome Autore
              </a>
            </div>
          </div>
          <!-- Publication Year Section -->
          <div class="info-section">
            <h2>Anno di Pubblicazione</h2>
            <p th:text="${book.publicationYear}">2023</p>
          </div>
        </div>
      </div>
        <!-- Reviews Section -->
        <div class="info-section">
          <h2>Recensioni</h2>
          <!-- Reviews List -->
          <div class="reviews-list" th:if="${not #lists.isEmpty(book.reviews)}">
            <div th:each="review : ${book.reviews}" class="review-item">
              <h4
                class="review-title"
                th:text="'Titolo: ' + ${review.title} + ' [ ' + ${review.user.nome} + ' ' + ${review.user.cognome} + ' ]'"
              >
                Titolo recensione
              </h4>
              <p class="review-text">Testo:</p>
              <p class="review-text" th:text="${review.text}">
                Testo della recensione
              </p>
              <p
                class="review-rating"
                th:text="${'Valutazione: ' + review.mark + '/5'}"
              >
                Valutazione: 5/5
              </p>
            </div>
          </div>
          <!-- No Reviews Message -->
          <div class="reviews-list" th:if="${#lists.isEmpty(book.reviews)}">
            <h3 class="review-empty">Nessuna recensione</h3>
          </div>
          <div class="login-to-review">
            Per scrivere una recensione, <a th:href="@{/login}">accedi qui</a>.
          </div>
        </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/books.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/books}" class="navbar-link active">Libri</a>
          <a th:href="@{/authors}" class="navbar-link">Autori</a>
          <a th:href="@{/login}" class="navbar-link">Accedi</a>
        </div>
      </div>
    </nav>
  </header>

  <main class="main-content">
    <div th:if="${books.empty}" class="empty-message">
      Nessun libro disponibile
    </div>

    <div th:unless="${books.empty}" class="books-grid">
      <div th:each="book : ${books}" class="book-card">
        <div class="book-cover-wrapper">
          <img th:if="${book.images != null and !book.images.empty}"
               th:src="${book.images[0].name}"
               th:alt="'Copertina di ' + ${book.title}" />
          <img th:unless="${book.images != null and !book.images.empty}"
               src="/images/placeholder.jpg"
               alt="Nessuna immagine disponibile" />
        </div>
        <div class="book-info">
          <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
          <a th:href="@{'/books/' + ${book.id}}"
             class="view-details-link">
            Dettagli
          </a>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>

</body>
</html>


--- resources/templates/error.html ---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8"/>
    <title>Errore - Siwbooks</title>
    <style>
      body { font-family: sans-serif; margin: 2em; }
      h1 { color: #c00; }
      .details p { margin: 0.5em 0; }
    </style>
</head>
<body>
    <h1>Si è verificato un errore</h1>
    <div class="details">
      <p th:text="'Status: ' + ${status}">Status: ?</p>
      <p th:text="'Errore: ' + ${error}">Errore: ?</p>
      <p th:text="'Messaggio: ' + ${message}">Messaggio: ?</p>
      <p th:text="'Path: ' + ${path}">Path: ?</p>
      <p th:text="'Timestamp: ' + ${timestamp}">Timestamp: ?</p>
    </div>
    <p><a th:href="@{/}">← Torna alla pagina principale</a></p>
</body>
</html>


--- resources/templates/login.html ---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head><title>Login</title></head>
<body>
  <h1>Accedi</h1>
  <form th:action="@{/login}" method="post">
    <div><label>Username: <input name="username"/></label></div>
    <div><label>Password: <input type="password" name="pwd"/></label></div>
    <button type="submit">Login</button>
    <div th:if="${param.error}">Credenziali non valide</div>

    <p class="register-prompt"> Non hai un account?
      <a href="/register" class="register-link">Registrati qui</a>
    </p>
  </form>
</body>
</html>


--- resources/templates/register.html ---
<form th:action="@{/register}" th:object="${credentials}" method="post">
  <div>
    <label>Username: <input th:field="*{username}"/></label>
    <div th:if="${#fields.hasErrors('username')}" th:errors="*{username}"></div>
  </div>
  <div>
    <label>Password: <input type="password" th:field="*{password}"/></label>
    <div th:if="${#fields.hasErrors('password')}" th:errors="*{password}"></div>
  </div>
  <div>
    <label>Nome: <input th:field="*{user.nome}"/></label>
  </div>
  <div>
    <label>Cognome: <input th:field="*{user.cognome}"/></label>
  </div>
  <div>
    <label>Email: <input th:field="*{user.email}"/></label>
  </div>
  <button type="submit">Registrati</button>
</form>


--- resources/templates/review_edit.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Modifica recensione</title>
</head>
<body>

<h1>Modifica la tua recensione</h1>

<form th:action="@{/books/{bookId}/reviews/{reviewId}/edit(
                     bookId=${bookId},
                     reviewId=${editReview.id})}"
      th:object="${editReview}"
      method="post">

  <div>
    <label>Titolo:
      <input type="text" th:field="*{title}" />
    </label>
    <div th:if="${#fields.hasErrors('title')}" th:errors="*{title}"></div>
  </div>

  <div>
    <label>Testo:
      <textarea th:field="*{text}"></textarea>
    </label>
    <div th:if="${#fields.hasErrors('text')}" th:errors="*{text}"></div>
  </div>

  <div>
    <label>Voto:
      <input type="number" min="1" max="5" th:field="*{mark}" />
    </label>
    <div th:if="${#fields.hasErrors('mark')}" th:errors="*{mark}"></div>
  </div>

  <button type="submit">Aggiorna</button>
  <a th:href="@{'/books/' + ${bookId}}">Annulla</a>
</form>

</body>
</html>


--- resources/templates/user/author.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/author.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link active">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
      <div class="author-card">
        <img th:if="${author.photo==null}"
             src="/images/placeholder.jpg" 
             alt="Nessuna foto autore">
        <img th:unless="${author.photo==null}"
             th:src="${author.photo.name}" 
             th:alt="'Foto di ' + ${author.getFullName()}">
        <div th:text="'Nome: ' + ${author.name}"></div>
        <div th:text="'Cognome: ' + ${author.surname}"></div>
        <div th:text="'Nato il: ' + ${author.birthDate}"></div>
        <div th:if="${author.deathDate!=null}" th:text="'Morto il: ' + ${author.deathDate}"></div>
        <div th:text="'Nazionalità: ' + ${#strings.capitalize(#strings.toLowerCase(author.nationality))}"></div>
      </div>

      <div th:if="${author.books != null and !author.books.empty}">
          <div th:if="${author.books.empty}" class="empty-message">
            Nessun libro disponibile
          </div>

          <div th:unless="${author.books.empty}" class="books-grid">
            <div th:each="book : ${author.books}" class="book-card">
              <div class="book-cover-wrapper">
                <img th:if="${book.images != null and !book.images.empty}"
                    th:src="${book.images[0].name}"
                    th:alt="'Copertina di ' + ${book.title}" />
                <img th:unless="${book.images != null and !book.images.empty}"
                    src="/images/placeholder.jpg"
                    alt="Nessuna immagine disponibile" />
              </div>
              <div class="book-info">
                <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
              </div>
            </div>
          </div>

        </div>
      </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/user/authors.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/authors.css}">
    <link rel="stylesheet" th:href="@{/css/layout.css}">

</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link active">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="main-content">
    <div th:if="${authors.empty}" class="no-content"> 
        Nessun autore disponibile
    </div>
    <div th:unless="${authors.empty}" 
        class="authors-grid">
        <div th:each="author : ${authors}"
            class="author-card">
        <img th:if="${author.photo == null}"
            src="/images/placeholder.jpg"
            alt="Nessuna immagine autore"/>
        <img th:if="${author.photo != null}"
            th:src="${author.photo.name}"
            alt="Immagine autore"/>
        <div class="author-info">
            <h2 th:text="${author.getFullName()}">Full Name</h2>
            <a th:href="@{'/user/authors/' + ${author.id}}"
            class="view-details-link">Dettagli</a>
        </div>
        </div>
    </div>
    </main>


    <footer class="footer">
    <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
    </div>
	</footer>

</body>
</html>

--- resources/templates/user/book.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" th:href="@{/css/book.css}" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>

  <body>
  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link active">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <main class="details-container">
      <div class="book-details">
        <!-- Section IMAGES ORIZZONTALI -->
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(book.images)}">
            <div th:each="img : ${book.images}" class="image-item">
              <img
                th:src="@{${img.name}}"
                class="book-img"
                th:alt="'Immagine del libro ' + ${book.title}"
              />
            </div>
          </div>
          <!-- Placeholder for no images -->
          <div
            th:if="${#lists.isEmpty(book.images)}"
            class="no-images-placeholder"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <!-- Book Information Section -->
        <div class="book-info">
          <h1 class="book-title" th:text="${book.title}">Titolo del Libro</h1>
          <!-- Authors Section -->
          <div class="info-section">
            <h2>Autori</h2>
            <div class="authors-list">
              <a
                th:each="author : ${book.authors}"
                th:href="@{'/user/authors/' + ${author.id}}"
                class="author-link"
                th:text="${author.name + ' ' + author.surname}"
              >
                Nome Autore
              </a>
            </div>
          </div>
          <!-- Publication Year Section -->
          <div class="info-section">
            <h2>Anno di Pubblicazione</h2>
            <p th:text="${book.publicationYear}">2023</p>
          </div>
        </div>
      </div>
        <!-- Reviews Section -->
        <div class="info-section">
          <h2>Recensioni</h2>
          <!-- Reviews List -->
          <div class="reviews-list" th:if="${not #lists.isEmpty(book.reviews)}">
            <div th:each="review : ${book.reviews}" class="review-item">
              <h4
                class="review-title"
                th:text="'Titolo: ' + ${review.title} + ' [ ' + ${review.user.nome} + ' ' + ${review.user.cognome} + ' ]'"
              >
                Titolo recensione
              </h4>
              <p class="review-text">Testo:</p>
              <p class="review-text" th:text="${review.text}">
                Testo della recensione
              </p>
              <p
                class="review-rating"
                th:text="${'Valutazione: ' + review.mark + '/5'}"
              >
                Valutazione: 5/5
              </p>
            </div>
          </div>
          <!-- No Reviews Message -->
          <div class="reviews-list" th:if="${#lists.isEmpty(book.reviews)}">
            <h3 class="review-empty">Nessuna recensione</h3>
          </div>

        <div th:unless="${hasReview}">
          <form th:action="@{'/user/' + ${user.id} + '/books/' + ${book.id} + '/review'}"
                method="post"
                class="review-form">
            <!-- CSRF -->
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>

            <input type="text" name="title" placeholder="Titolo" required>
            <textarea name="text" placeholder="Testo della recensione" required></textarea>
            <select name="mark" required>
              <option value="" disabled selected>Valutazione</option>
              <option th:each = "i : ${#numbers.sequence(1,5)}"
                      th:value="${i}" th:text="${i}">1</option>
            </select>
            <button type="submit">Invia Recensione</button>
          </form>
        </div>

        <div th:if="${hasReview}" class="already-reviewed">
          Hai già commentato!
        </div>

        </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwbooks - La tua libreria digitale</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/user/books.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link active">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
          <form th:action="@{/logout}" method="post">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

  <main class="main-content">
    <div th:if="${books.empty}" class="empty-message">
      Nessun libro disponibile
    </div>

    <div th:unless="${books.empty}" class="books-grid">
      <div th:each="book : ${books}" class="book-card">
        <div class="book-cover-wrapper">
          <img th:if="${book.images != null and !book.images.empty}"
               th:src="${book.images[0].name}"
               th:alt="'Copertina di ' + ${book.title}" />
          <img th:unless="${book.images != null and !book.images.empty}"
               src="/images/placeholder.jpg"
               alt="Nessuna immagine disponibile" />
        </div>
        <div class="book-info">
          <h2 class="book-title" th:text="${book.title}">Titolo libro</h2>
          <a th:href="@{'/user/books/' + ${book.id}}"
             class="view-details-link">
            Dettagli
          </a>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>

</body>
</html>


--- resources/templates/user/profile.html ---
<!DOCTYPE html>
<html lang="it" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Catalogo Libri</title>
  <link rel="stylesheet" th:href="@{/css/layout.css}">
  <link rel="stylesheet" th:href="@{/css/books.css}">
</head>
<body>

  <header class="header">
    <nav class="navbar">
      <div class="navbar-content">
        <div class="navbar-links-group">
          <h1 class="navbar-Title">SiwBooks</h1>
        </div>
        <div class="navbar-links-group">
          <a th:href="@{/}" class="navbar-link">Home</a>
          <a th:href="@{/user/books}" class="navbar-link">Libri</a>
          <a th:href="@{/user/authors}" class="navbar-link">Autori</a>
          <a th:href="@{'/user/' + ${user.id}}" class="navbar-link active">Profilo</a>
          <form th:action="@{/logout}" method="post" style="display:inline">
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
            <button type="submit" class="navbar-link">Esci</button>
          </form>


        </div>
      </div>
    </nav>
  </header>

    <h1 th:text="'Bentornato ' + ${user.nome}">Bentornato Mario</h1>
    <p th:text="${user.nome}">Mario</p>
    <p th:text="${user.cognome}">Rossi</p>
    <p th:text="${user.email}">example@gmail.com</p>


  <footer class="footer">
    <div class="footer-content">
      <p>Siwbooks - La tua libreria digitale</p>
    </div>
  </footer>


</body>
</html>